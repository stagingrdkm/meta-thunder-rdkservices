From: Mikolaj Staworzynski <mikolaj.staworzynski@redembedded.com>
Date: Mon, 21 Feb 2022 23:31:04 +0100
Subject: [PATCH] [HUMAXEOSR-995] Block plugins activation when WPEFramework
 termination started

---
 Source/WPEFramework/PluginServer.cpp | 13 +++++++++----
 Source/WPEFramework/PluginServer.h   | 12 ++++++++++++
 2 files changed, 21 insertions(+), 4 deletions(-)

diff --git a/Source/WPEFramework/PluginServer.cpp b/Source/WPEFramework/PluginServer.cpp
index 4986ed7..56cf15c 100644
--- a/Source/WPEFramework/PluginServer.cpp
+++ b/Source/WPEFramework/PluginServer.cpp
@@ -363,13 +363,17 @@ namespace PluginHost
                 Unlock();
 
                 TRACE(Activity, (_T("Activation plugin [%s]:[%s]"), className.c_str(), callSign.c_str()));
+                bool activationBlocked = _administrator.IsPluginActivationBlocked();
+                if (!activationBlocked) {
+                    REPORT_DURATION_WARNING( { ErrorMessage(_handler->Initialize(this)); }, WarningReporting::TooLongPluginState, WarningReporting::TooLongPluginState::StateChange::ACTIVATION, callSign.c_str());
+                } else {
+                    TRACE_L1("Plugin activation is blocked");
+                }
 
-                REPORT_DURATION_WARNING( { ErrorMessage(_handler->Initialize(this)); }, WarningReporting::TooLongPluginState, WarningReporting::TooLongPluginState::StateChange::ACTIVATION, callSign.c_str());
-
-                if (HasError() == true) {
+                if (HasError() == true || activationBlocked) {
                     result = Core::ERROR_GENERAL;
 
-                    SYSLOG(Logging::Startup, (_T("Activation of plugin [%s]:[%s], failed. Error [%s]"), className.c_str(), callSign.c_str(), ErrorMessage().c_str()));
+                    SYSLOG(Logging::Startup, (_T("Activation of plugin [%s]:[%s], failed. Error [%s] activationBlocked=%d"), className.c_str(), callSign.c_str(), ErrorMessage().c_str(), activationBlocked));
 
                     Lock();
                     ReleaseInterfaces();
@@ -806,6 +810,7 @@ namespace PluginHost
 
     void Server::Close()
     {
+        _services.BlockPluginActivation();
         Plugin::Controller* destructor(_controller->ClassType<Plugin::Controller>());
         destructor->AddRef();
         _connections.Close(Core::infinite);
diff --git a/Source/WPEFramework/PluginServer.h b/Source/WPEFramework/PluginServer.h
index d585ab4..c606e36 100644
--- a/Source/WPEFramework/PluginServer.h
+++ b/Source/WPEFramework/PluginServer.h
@@ -1603,6 +1603,7 @@ namespace PluginHost {
                 , _server(server)
                 , _subSystems(this)
                 , _authenticationHandler(nullptr)
+                , _pluginActivationBlocked(false)
             {
             }
 #ifdef __WINDOWS__
@@ -1615,6 +1616,16 @@ namespace PluginHost {
             }
 
         public:
+
+            bool IsPluginActivationBlocked() {
+                bool result = _pluginActivationBlocked.load();
+                return result;
+            }
+
+            void BlockPluginActivation() {
+                _pluginActivationBlocked = true;
+            }
+
             inline void Security(const bool enabled)
             {
                 _adminLock.Lock();
@@ -1974,6 +1985,7 @@ namespace PluginHost {
             Server& _server;
             Core::Sink<SubSystems> _subSystems;
             IAuthenticate* _authenticationHandler;
+            std::atomic_bool _pluginActivationBlocked;
         };
 
         // Connection handler is the listening socket and keeps track of all open
-- 
2.25.1

