From c1e06f4c86ef1f029b82a85c4115408b14041a74 Mon Sep 17 00:00:00 2001
From: Dawid Trendota <dawid.trendota@consult.red>
Date: Wed, 15 Mar 2023 10:34:24 +0100
Subject: [PATCH] [OMWAPPI-1314] Extend ThunderClientLibraries ocdm API for
 metrics support

---
 Source/ocdm/open_cdm.cpp    | 17 +++++++++++++++++
 Source/ocdm/open_cdm.h      | 17 +++++++++++++++++
 Source/ocdm/open_cdm_impl.h |  9 +++++++++
 4 files changed, 50 insertions(+)

 class EXTERNAL KeyId {
diff --git a/Source/ocdm/open_cdm.cpp b/Source/ocdm/open_cdm.cpp
index 77c7e58..d3ba096 100644
--- a/Source/ocdm/open_cdm.cpp
+++ b/Source/ocdm/open_cdm.cpp
@@ -540,6 +540,23 @@ OpenCDMError opencdm_session_decrypt_v2(struct OpenCDMSession* session,
     return (result);
 }
 
+OpenCDMError opencdm_get_metric_system_data(
+    const std::string &keyId,
+    uint8_t buffer[],
+    uint32_t bufferLength,
+    uint32_t* count) {
+
+    OpenCDMAccessor * accessor = OpenCDMAccessor::Instance();
+    OpenCDMError result(OpenCDMError::ERROR_KEYSYSTEM_NOT_SUPPORTED);
+
+    if(accessor != nullptr) {
+        Exchange::OCDM_RESULT ocdmResult = accessor->GetSystemMetrics(keyId, buffer, bufferLength, *count);
+        return static_cast<OpenCDMError>(ocdmResult);
+    }
+
+    return result;
+}
+
 
 void opencdm_dispose() {
     Core::Singleton::Dispose();
diff --git a/Source/ocdm/open_cdm.h b/Source/ocdm/open_cdm.h
index a21f9ae..ef9f6df 100644
--- a/Source/ocdm/open_cdm.h
+++ b/Source/ocdm/open_cdm.h
@@ -184,11 +184,13 @@ typedef enum {
     ERROR_INVALID_SESSION = 0x80000003,
     ERROR_INVALID_DECRYPT_BUFFER = 0x80000004,
     ERROR_OUT_OF_MEMORY = 0x80000005,
+    ERROR_INTERFACE_NOT_IMPLEMENTED = 0x80000006,
     ERROR_FAIL = 0x80004005,
     ERROR_INVALID_ARG = 0x80070057,
     ERROR_SERVER_INTERNAL_ERROR = 0x8004C600,
     ERROR_SERVER_INVALID_MESSAGE = 0x8004C601,
     ERROR_SERVER_SERVICE_SPECIFIC = 0x8004C604,
+    ERROR_BUFFER_TOO_SMALL = 0x8004C605,
 } OpenCDMError;
 
 /**
@@ -607,6 +609,21 @@ EXTERNAL OpenCDMError opencdm_session_decrypt_v2(struct OpenCDMSession* session,
     const SampleInfo* sampleInfo,
     const MediaProperties* streamProperties);
 
+/*
+ * \param bufferLength,
+ *    in: size of  metrics buffer
+ *    out: required size to hold all data available when return value is ERROR_BUFFER_TOO_SMALL or number of characters written into metrics (incl 0 terminator)
+ * \param buffer, buffer to write metrics into
+ *    The buffer is allocated by the client and passed in through the C-interfaces above. The length of the buffer is passed in the bufferLength parameter.
+ *    Metric data written in the buffer must not exceed the given bufferLength. On return the count parameter is set to the amount of data written into the buffer.
+ *    If the buffer could not hold all data, the error code: ERROR_BUFFER_TOO_SMALL is returned. The buffer is filled up to the maximum it can hold. The call can be repeated with a larger buffer.
+ */
+EXTERNAL OpenCDMError opencdm_get_metric_system_data(
+    const std::string &keyId,
+    uint8_t buffer[],
+    uint32_t bufferLength,
+    uint32_t* count);
+
 /**
  * @brief Close the cached open connection if it exists.
  *
diff --git a/Source/ocdm/open_cdm_impl.h b/Source/ocdm/open_cdm_impl.h
index c886bfa..776b03d 100644
--- a/Source/ocdm/open_cdm_impl.h
+++ b/Source/ocdm/open_cdm_impl.h
@@ -311,6 +311,15 @@ public:
             secureStoreHashLength);
     }
 
+    Exchange::OCDM_RESULT GetSystemMetrics(
+        const std::string& keySystem,
+        uint8_t metrics[],
+        uint32_t metrics_len,
+        uint32_t &count) {
+        ASSERT(_remote && "This method only works on IAccessorOCDM implementations.");
+        return _remote->GetSystemMetrics(keySystem, metrics, metrics_len, count);
+    }
+
     void SystemBeingDestructed(OpenCDMSystem* system);
 
 private:
-- 
2.25.1


