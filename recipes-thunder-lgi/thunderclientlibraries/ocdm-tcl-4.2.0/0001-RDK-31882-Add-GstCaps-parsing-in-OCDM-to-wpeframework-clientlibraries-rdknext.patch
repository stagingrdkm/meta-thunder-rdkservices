From bd171ec0306fb6aacc984f804fa867fa6be55970 Mon Sep 17 00:00:00 2001
From: Douglas Adler <douglas_adler2@comcast.com>
Date: Mon, 8 Mar 2021 16:14:38 +0000
Subject: [PATCH] RDK-31882 : Add GstCaps parsing in OCDM to
 wpeframework-clientlibraries
Source: COMCAST
License: Apache-2.0
Upstream-Status: N/A

Reason for change: Amlogic needs to handle Audio data outside the SVP path
Test Procedure: Verify that CDM module is detecting the stream type
Risks: None

Signed-off-by: Douglas Adler <douglas_adler2@comcast.com>
---
 .../adapter/gstreamer/open_cdm_adapter.cpp    | 45 ++++++++++++++++---
 Source/ocdm/adapter/open_cdm_adapter.h        | 26 ++++++++++-
 Source/ocdm/open_cdm.cpp                      | 29 ++++++++++--
 Source/ocdm/open_cdm.h                        | 20 ++++++++-
 Source/ocdm/open_cdm_impl.h                   | 17 +++++--
 5 files changed, 122 insertions(+), 15 deletions(-)

diff --git a/Source/ocdm/adapter/gstreamer/open_cdm_adapter.cpp b/Source/ocdm/adapter/gstreamer/open_cdm_adapter.cpp
index 2145782..40854b1 100644
--- a/Source/ocdm/adapter/gstreamer/open_cdm_adapter.cpp
+++ b/Source/ocdm/adapter/gstreamer/open_cdm_adapter.cpp
@@ -31,8 +31,14 @@ OpenCDMError opencdm_gstreamer_transform_caps(GstCaps** caps)
     return (ERROR_NONE);
 }
 
-OpenCDMError opencdm_gstreamer_session_decrypt(struct OpenCDMSession* session, GstBuffer* buffer, GstBuffer* subSampleBuffer, const uint32_t subSampleCount,
-                                               GstBuffer* IV, GstBuffer* keyID, uint32_t initWithLast15)
+OpenCDMError opencdm_gstreamer_session_decrypt(struct OpenCDMSession* session, GstBuffer* buffer, GstBuffer* subSample, const uint32_t subSampleCount,
+                                                GstBuffer* IV, GstBuffer* keyID, uint32_t initWithLast15)
+{
+    return opencdm_gstreamer_session_decrypt_ex(session, buffer, subSample, subSampleCount, IV, keyID, initWithLast15, NULL);
+}
+
+OpenCDMError opencdm_gstreamer_session_decrypt_ex(struct OpenCDMSession* session, GstBuffer* buffer, GstBuffer* subSampleBuffer, const uint32_t subSampleCount,
+                                               GstBuffer* IV, GstBuffer* keyID, uint32_t initWithLast15, GstCaps* caps)
 {
     OpenCDMError result (ERROR_INVALID_SESSION);
 
@@ -87,6 +93,16 @@ OpenCDMError opencdm_gstreamer_session_decrypt(struct OpenCDMSession* session, G
             gst_structure_get_uint(protectionMeta->info, "skip_byte_block", &pattern.clear_blocks);
         }
 
+       // Generate a GstCaps string for stream info in CDM module
+        uint8_t*    caps_str = NULL;
+        uint16_t    caps_len = 0;
+        if(caps != NULL) {
+            caps_str = (uint8_t*)gst_caps_to_string(caps);
+            if(caps_str != nullptr) {
+                caps_len = strlen((const char*)caps_str);
+            }
+        }
+
         uint8_t *mappedData = reinterpret_cast<uint8_t* >(dataMap.data);
         uint32_t mappedDataSize = static_cast<uint32_t >(dataMap.size);
         uint8_t *mappedIV = reinterpret_cast<uint8_t* >(ivMap.data);
@@ -131,8 +147,9 @@ OpenCDMError opencdm_gstreamer_session_decrypt(struct OpenCDMSession* session, G
             }
             gst_byte_reader_set_pos(reader, 0);
 
+            result = opencdm_session_decrypt(session, encryptedData, totalEncrypted, encScheme, pattern, mappedIV, mappedIVSize, 
+                                             mappedKeyID, mappedKeyIDSize, initWithLast15, caps_str, caps_len);
 
-            result = opencdm_session_decrypt(session, encryptedData, totalEncrypted, encScheme, pattern, mappedIV, mappedIVSize, mappedKeyID, mappedKeyIDSize, initWithLast15);
             // Re-build sub-sample data.
             index = 0;
             unsigned total = 0;
@@ -149,7 +166,12 @@ OpenCDMError opencdm_gstreamer_session_decrypt(struct OpenCDMSession* session, G
             free(encryptedData);
             gst_buffer_unmap(subSampleBuffer, &sampleMap);
         } else {
-            result = opencdm_session_decrypt(session, mappedData, mappedDataSize, encScheme, pattern, mappedIV, mappedIVSize, mappedKeyID, mappedKeyIDSize, initWithLast15);
+            result = opencdm_session_decrypt(session, mappedData, mappedDataSize, encScheme, pattern, mappedIV, mappedIVSize, 
+                                             mappedKeyID, mappedKeyIDSize, initWithLast15, caps_str, caps_len);
+        }
+
+        if(caps_str != nullptr) {
+            g_free(caps_str);
         }
 
         if (keyID != nullptr) {
@@ -343,11 +365,24 @@ OpenCDMError opencdm_gstreamer_session_decrypt_buffer(struct OpenCDMSession* ses
             sampleInfo.keyId = mappedKeyID;
             sampleInfo.keyIdLength = mappedKeyIDSize;
 
+            uint8_t*    caps_str = NULL;
+            uint16_t    caps_len = 0;
+            if(caps != NULL) {
+                caps_str = (uint8_t*)gst_caps_to_string(caps);
+                if(caps_str != nullptr) {
+                    caps_len = strlen((const char*)caps_str);
+                }
+            }
+
             result = opencdm_session_decrypt_v2(session,
                                                 mappedData,
                                                 mappedDataSize,
                                                 &sampleInfo,
-                                                spPtr);
+                                                spPtr,
+                                                caps_str,
+                                                caps_len);
+
+            g_free(caps_str);
 
             //Clean up
             if(subSampleInfoPtr != nullptr) {
diff --git a/Source/ocdm/open_cdm.cpp b/Source/ocdm/open_cdm.cpp
index 8aafae7..77c7e58 100644
--- a/Source/ocdm/open_cdm.cpp
+++ b/Source/ocdm/open_cdm.cpp
@@ -542,6 +542,8 @@ OpenCDMError opencdm_session_close(struct OpenCDMSession* session)
  * \param encryptedLength Length of encrypted data buffer (in bytes).
  * \param IV Initial vector (IV) used during decryption.
  * \param IVLength Length of IV buffer (in bytes).
+ * \param streamInfo data blob with information about the current stream.
+ * \param streamInfoLength Length of info buffer (in bytes).
  * \return Zero on success, non-zero on error.
  * REPLACING: uint32_t decrypt(void* session, uint8_t*, const uint32_t, const
  * uint8_t*, const uint16_t);
@@ -553,7 +555,9 @@ OpenCDMError opencdm_session_decrypt(struct OpenCDMSession* session,
     const EncryptionPattern pattern,
     const uint8_t* IV, const uint16_t IVLength,
     const uint8_t* keyId, const uint16_t keyIdLength,
-    uint32_t initWithLast15 /* = 0 */)
+    uint32_t initWithLast15 /* = 0 */,
+    uint8_t* streamInfo /* = NULL */,
+    uint16_t streamInfoLength /*  = 0 */)
 {
     OpenCDMError result(ERROR_INVALID_SESSION);
     if (session != nullptr) {
@@ -568,7 +572,7 @@ OpenCDMError opencdm_session_decrypt(struct OpenCDMSession* session,
         sampleInfo.keyId = const_cast<uint8_t*>(keyId);
         sampleInfo.keyIdLength = static_cast<uint8_t>(keyIdLength);
         result = encryptedLength > 0 ? static_cast<OpenCDMError>(session->Decrypt(
-            encrypted, encryptedLength, const_cast<const SampleInfo*>(&sampleInfo), initWithLast15, nullptr)) : ERROR_NONE;
+            encrypted, encryptedLength, const_cast<const SampleInfo*>(&sampleInfo), initWithLast15, nullptr, streamInfo, streamInfoLength)) : ERROR_NONE;
     }
 
     return (result);
@@ -585,7 +589,7 @@ OpenCDMError opencdm_session_decrypt_v2(struct OpenCDMSession* session,
     if (session != nullptr) {
         uint32_t initWithLast15 = 0;
         result = encryptedLength > 0 ? static_cast<OpenCDMError>(session->Decrypt(
-            encrypted, encryptedLength, sampleInfo, initWithLast15, properties)) : ERROR_NONE;
+            encrypted, encryptedLength, sampleInfo, initWithLast15, properties, NULL, 0)) : ERROR_NONE;
     }
 
     return (result);
diff --git a/Source/ocdm/open_cdm.h b/Source/ocdm/open_cdm.h
index 60547c3..fd87c46 100644
--- a/Source/ocdm/open_cdm.h
+++ b/Source/ocdm/open_cdm.h
@@ -584,7 +584,9 @@ EXTERNAL OpenCDMError opencdm_session_decrypt(struct OpenCDMSession* session,
     const EncryptionPattern pattern, 
     const uint8_t* IV, uint16_t IVLength,
     const uint8_t* keyId, const uint16_t keyIdLength,
-    uint32_t initWithLast15 = 0);
+    uint32_t initWithLast15 = 0,
+    uint8_t* streamInfo = NULL,
+    uint16_t streamInfoLength = 0);
 
 #else
 EXTERNAL OpenCDMError opencdm_session_decrypt(struct OpenCDMSession* session,
@@ -594,7 +596,9 @@ EXTERNAL OpenCDMError opencdm_session_decrypt(struct OpenCDMSession* session,
     const EncryptionPattern pattern,
     const uint8_t* IV, uint16_t IVLength,
     const uint8_t* keyId, const uint16_t keyIdLength,
-    uint32_t initWithLast15);
+    uint32_t initWithLast15,
+    uint8_t* streamInfo,
+    uint16_t streamInfoLength);
 #endif // __cplusplus
 
 /**
diff --git a/Source/ocdm/open_cdm_impl.h b/Source/ocdm/open_cdm_impl.h
index b15bff8..c886bfa 100644
--- a/Source/ocdm/open_cdm_impl.h
+++ b/Source/ocdm/open_cdm_impl.h
@@ -397,7 +397,9 @@ private:
         uint32_t Decrypt(uint8_t* encryptedData, uint32_t encryptedDataLength,
             const ::SampleInfo* sampleInfo,
             uint32_t initWithLast15,
-            const ::MediaProperties* properties)
+            const ::MediaProperties* properties,
+            const uint8_t* streamInfo /* = NULL */,
+            const uint16_t streamInfoLength /* = 0 */)
         {
             int ret = 0;
 
@@ -442,6 +444,7 @@ private:
                 SetEncScheme(static_cast<uint8_t>(encScheme));
                 SetEncPattern(pattern.encrypted_blocks,pattern.clear_blocks);
                 InitWithLast15(initWithLast15);
+                SetStreamInfo(streamInfoLength, streamInfo);
                 if(properties != nullptr) {
                     SetMediaProperties(properties->height, properties->width, properties->media_type);
                 }
@@ -649,7 +652,8 @@ inline void SetParameter(const std::string& name, const std::string& value)
     uint32_t Decrypt(uint8_t* encryptedData, const uint32_t encryptedDataLength,
         const ::SampleInfo* sampleInfo,
         uint32_t initWithLast15,
-        const ::MediaProperties* properties)
+        const ::MediaProperties* properties,
+        const uint8_t* streamInfo, const uint16_t streamInfoLength)
     {
         uint32_t result = OpenCDMError::ERROR_INVALID_DECRYPT_BUFFER;
 
@@ -665,7 +669,8 @@ inline void SetParameter(const std::string& name, const std::string& value)
             result = decryptSession->Decrypt(encryptedData, encryptedDataLength, 
                 sampleInfo,
                 initWithLast15,
-                properties);
+                properties,
+                streamInfo, streamInfoLength);
             if(result)
             {
                 TRACE_L1("Decrypt() failed with return code: %x", result);
-- 
2.25.1

