From: Piotr Andrzejewski <piotr.andrzejewski@redembedded.com>

ONEM-40864 - Deinitialize DRM on client crash

---
 Source/ocdm/open_cdm.h       | 15 +++++----
 Source/ocdm/open_cdm_ext.cpp | 40 +++++++++++++++--------
 Source/ocdm/open_cdm_impl.h  | 62 +++++++++++++++++-------------------
 3 files changed, 64 insertions(+), 53 deletions(-)

diff --git a/Source/ocdm/open_cdm.h b/Source/ocdm/open_cdm.h
index ebe1747..541612f 100644
--- a/Source/ocdm/open_cdm.h
+++ b/Source/ocdm/open_cdm.h
@@ -298,19 +298,20 @@ EXTERNAL struct OpenCDMSystem* opencdm_create_system(const char keySystem[]);
 EXTERNAL OpenCDMError opencdm_create_system_extended(const char keySystem[], struct OpenCDMSystem** system);
 
 /**
- * Destructs an \ref OpenCDMAccessor instance.
- * \param system \ref OpenCDMAccessor instance to destruct.
+ * \brief Creates DRM system.
+ *
+ * \param system Output parameter that will contain pointer to instance of \ref OpenCDMSystem.
+ * \param cleanOnDestroy should cleaning on destroy OpenCDMSystem be performed.
  * \return Zero on success, non-zero on error.
  */
-EXTERNAL OpenCDMError opencdm_destruct_system(struct OpenCDMSystem* system);
+EXTERNAL OpenCDMError opencdm_create_system_extended_v2(const char keySystem[], struct OpenCDMSystem** system, bool cleanOnDestroy);
 
 /**
- * Destructs an \ref OpenCDMAccessor instance.
- * \param system \ref OpenCDMAccessor instance to destruct.
- * \param cleanOnDestroy should cleaning be performed.
+ * Destructs an \ref OpenCDMSystem instance.
+ * \param system \ref OpenCDMSystem instance to destruct.
  * \return Zero on success, non-zero on error.
  */
-EXTERNAL OpenCDMError opencdm_destruct_system_extended(struct OpenCDMSystem* system, bool cleanOnDestroy);
+EXTERNAL OpenCDMError opencdm_destruct_system(struct OpenCDMSystem* system);
 
 /**
  * \brief Checks if a DRM system is supported.
diff --git a/Source/ocdm/open_cdm_ext.cpp b/Source/ocdm/open_cdm_ext.cpp
index f376db4..6f9db4b 100644
--- a/Source/ocdm/open_cdm_ext.cpp
+++ b/Source/ocdm/open_cdm_ext.cpp
@@ -32,11 +32,16 @@
 DEPRECATED struct OpenCDMSystem* opencdm_create_system(const char keySystem[])
 {
     struct OpenCDMSystem* result = nullptr;
-    opencdm_create_system_extended(keySystem, &result);
+    opencdm_create_system_extended_v2(keySystem, &result, true);
     return result;
 }
 
 OpenCDMError opencdm_create_system_extended(const char keySystem[], struct OpenCDMSystem** system)
+{
+    return opencdm_create_system_extended_v2(keySystem, system, true);
+}
+
+OpenCDMError opencdm_create_system_extended_v2(const char keySystem[], struct OpenCDMSystem** system, bool cleanOnDestroy)
 {
     OpenCDMError result(OpenCDMError::ERROR_INVALID_ARG);
     ASSERT(system != nullptr);
@@ -51,8 +56,18 @@ OpenCDMError opencdm_create_system_extended(const char keySystem[], struct OpenC
             result = static_cast<OpenCDMError>(OpenCDMAccessor::Instance()->Metadata(std::string(keySystem), metadata));
 
             if (result == OpenCDMError::ERROR_NONE) {
-                *system = new OpenCDMSystem(keySystem, metadata);
-                result = static_cast<OpenCDMError>(OpenCDMAccessor::Instance()->InitializeCtx((*system)->keySystem()));
+                Exchange::IOCDMContext* ocdmCtx = nullptr;
+
+                result = static_cast<OpenCDMError>(OpenCDMAccessor::Instance()->CreateContext(keySystem, cleanOnDestroy, ocdmCtx));
+                TRACE_L1("Created a Context, result %p, %d", ocdmCtx, result);
+
+                if (result == OpenCDMError::ERROR_NONE) {
+
+                    *system = new OpenCDMSystem(ocdmCtx, keySystem, metadata);
+                    TRACE_L1("Created  system %s %p", keySystem, *system);
+                } else {
+                    TRACE_L1("Creating context failed %s", keySystem);
+                }
             }
         }
     }
@@ -61,19 +76,18 @@ OpenCDMError opencdm_create_system_extended(const char keySystem[], struct OpenC
 
 OpenCDMError opencdm_destruct_system(struct OpenCDMSystem* system)
 {
-    return opencdm_destruct_system_extended(system, true);
-}
+    OpenCDMError result(OpenCDMError::ERROR_INVALID_ARG);
 
-OpenCDMError opencdm_destruct_system_extended(struct OpenCDMSystem* system, bool cleanOnDestroy)
-{
     ASSERT(system != nullptr);
-    OpenCDMAccessor * accessor = OpenCDMAccessor::Instance();
-    accessor->SystemBeingDestructed(system);
-    OpenCDMError result = static_cast<OpenCDMError>(accessor->DeinitializeCtx(system->keySystem(), cleanOnDestroy));
-    delete system;
-    return result;
-}
 
+    if (system != nullptr) {
+        OpenCDMAccessor::Instance()->SystemBeingDestructed(system);
+        delete system;
+        result = OpenCDMError::ERROR_NONE;
+    }
+
+    return (result);
+}
 
 OpenCDMError opencdm_system_get_version(struct OpenCDMSystem* system,
     char versionStr[])
diff --git a/Source/ocdm/open_cdm_impl.h b/Source/ocdm/open_cdm_impl.h
index 6f7617c..5db2a27 100644
--- a/Source/ocdm/open_cdm_impl.h
+++ b/Source/ocdm/open_cdm_impl.h
@@ -37,15 +37,26 @@ using namespace WPEFramework;
 extern Core::CriticalSection _systemLock;
 
 struct OpenCDMSystem {
-    OpenCDMSystem(const char system[], const std::string& metadata) : _keySystem(system), _metadata(metadata) {}
-    ~OpenCDMSystem() = default;
-    OpenCDMSystem(const OpenCDMSystem&) = default;
-    OpenCDMSystem(OpenCDMSystem&&) = default;
+    OpenCDMSystem(Exchange::IOCDMContext* ocdmCtx, const char system[], const std::string& metadata)
+        : _ocdmCtx(ocdmCtx)
+        , _keySystem(system)
+        , _metadata(metadata)
+    {
+    }
+    ~OpenCDMSystem()
+    {
+        if (_ocdmCtx) {
+            _ocdmCtx->Release();
+        }
+    }
+    OpenCDMSystem(const OpenCDMSystem&) = delete;
+    OpenCDMSystem(OpenCDMSystem&&) = delete;
     OpenCDMSystem& operator=(OpenCDMSystem&&) = default;
     OpenCDMSystem& operator=(const OpenCDMSystem&) = default;
     const std::string& keySystem() const { return _keySystem; }
     const std::string& Metadata() const { return _metadata; }
 
+    Exchange::IOCDMContext* _ocdmCtx;
  private:
     std::string _keySystem;
     std::string _metadata;
@@ -192,6 +203,20 @@ public:
         return (result);
     }
 
+    virtual Exchange::OCDM_RESULT
+    CreateContext(const string& keySystem, bool cleanOnDestroy, Exchange::IOCDMContext*& context) override
+    {
+        Exchange::OCDM_RESULT result = Exchange::OCDM_INVALID_ACCESSOR;
+
+         _adminLock.Lock();
+         if (_remote != nullptr) {
+             result = _remote->CreateContext(keySystem, cleanOnDestroy, context);
+         }
+         _adminLock.Unlock();
+
+         return (result);
+    }
+
     // Create a MediaKeySession using the supplied init data and CDM data.
     virtual Exchange::OCDM_RESULT
     CreateSession(const string& keySystem, const int32_t licenseType,
@@ -450,35 +475,6 @@ public:
     }
 
     void SystemBeingDestructed(OpenCDMSystem* system);
-
-    Exchange::OCDM_RESULT
-    InitializeCtx(const std::string& keySystem) override
-    {
-        Exchange::OCDM_RESULT result = Exchange::OCDM_INVALID_ACCESSOR;
-
-        _adminLock.Lock();
-        if (_remote != nullptr) {
-            result = _remote->InitializeCtx(keySystem);
-        }
-        _adminLock.Unlock();
-
-        return (result);
-    }
-
-    Exchange::OCDM_RESULT
-    DeinitializeCtx(const std::string& keySystem, bool cleanOnDestroy) override
-    {
-        Exchange::OCDM_RESULT result = Exchange::OCDM_INVALID_ACCESSOR;
-
-        _adminLock.Lock();
-        if (_remote != nullptr) {
-            result = _remote->DeinitializeCtx(keySystem, cleanOnDestroy);
-        }
-        _adminLock.Unlock();
-
-        return (result);
-    }
-
 private:
     mutable uint32_t _refCount;
     string _domain;
-- 
2.30.0

