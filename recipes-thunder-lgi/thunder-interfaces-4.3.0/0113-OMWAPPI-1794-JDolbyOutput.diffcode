From: Mikolaj Staworzynski <mikolaj.staworzynski@redembedded.com>
Date: Mon, 22 May 2023 11:03:14 +0100
Subject: [PATCH] [OMWAPPI-1794] ThunderInterfaces align PlayerInfo API in generated code

--- ./a/JDolbyOutput.h	2023-05-22 10:12:57.275481349 +0200
+++ ./b/JDolbyOutput.h	2023-05-19 17:32:22.493481942 +0200
@@ -1,5 +1,6 @@
 
 // Generated automatically from 'IDolby.h'. DO NOT EDIT.
+// ... and patched manually to be compatible with Thunder2 interface "dolby_" prefix
 
 #pragma once
 
@@ -32,7 +33,7 @@
                 _module.RegisterVersion(_T("JOutput"), Version::Major, Version::Minor, Version::Patch);
 
                 // Property: atmosmetadata - Atmos capabilities of Sink (r/o)
-                _module.Register<void, Core::JSON::Boolean>(_T("atmosmetadata"),
+                _module.Register<void, Core::JSON::Boolean>(_T("dolby_atmosmetadata"),
                     [_destination](Core::JSON::Boolean& Result) -> uint32_t {
                         uint32_t _errorCode;
                         // read-only property get
@@ -45,7 +46,7 @@
                     });
 
                 // Property: soundmode - Sound Mode - Mono/Stereo/Surround (r/o)
-                _module.Register<void, Core::JSON::EnumType<Exchange::Dolby::IOutput::SoundModes>>(_T("soundmode"),
+                _module.Register<void, Core::JSON::EnumType<Exchange::Dolby::IOutput::SoundModes>>(_T("dolby_soundmode"),
                     [_destination](Core::JSON::EnumType<Exchange::Dolby::IOutput::SoundModes>& Result) -> uint32_t {
                         uint32_t _errorCode;
                         // read-only property get
@@ -58,7 +59,7 @@
                     });
 
                 // Property: enableatmosoutput - Enable Atmos Audio Output (w/o)
-                _module.Register<Core::JSON::Boolean, void>(_T("enableatmosoutput"),
+                _module.Register<Core::JSON::Boolean, void>(_T("dolby_enableatmosoutput"),
                     [_destination](const Core::JSON::Boolean& Params) -> uint32_t {
                         uint32_t _errorCode;
                         // write-only property set
@@ -68,7 +69,7 @@
                     });
 
                 // Property: mode - Dolby Mode
-                _module.Register<Core::JSON::EnumType<Exchange::Dolby::IOutput::Type>, Core::JSON::EnumType<Exchange::Dolby::IOutput::Type>>(_T("mode"),
+                _module.Register<Core::JSON::EnumType<Exchange::Dolby::IOutput::Type>, Core::JSON::EnumType<Exchange::Dolby::IOutput::Type>>(_T("dolby_mode"),
                     [_destination](const Core::JSON::EnumType<Exchange::Dolby::IOutput::Type>& Params, Core::JSON::EnumType<Exchange::Dolby::IOutput::Type>& Result) -> uint32_t {
                         uint32_t _errorCode;
                         if (Params.IsSet() == false) {
@@ -91,10 +92,10 @@
 
             static void Unregister(PluginHost::JSONRPC& _module)
             {
-                _module.Unregister(_T("atmosmetadata"));
-                _module.Unregister(_T("soundmode"));
-                _module.Unregister(_T("enableatmosoutput"));
-                _module.Unregister(_T("mode"));
+                _module.Unregister(_T("dolby_atmosmetadata"));
+                _module.Unregister(_T("dolby_soundmode"));
+                _module.Unregister(_T("dolby_enableatmosoutput"));
+                _module.Unregister(_T("dolby_mode"));
             }
 
             namespace Event {
@@ -106,7 +107,7 @@
                     _params.Mode = static_cast<Exchange::Dolby::IOutput::SoundModes>(mode);
                     _params.Enabled = enabled;
 
-                    _module.Notify(_T("audiomodechanged"), _params);
+                    _module.Notify(_T("dolby_audiomodechanged"), _params);
                 }
 
             }; // namespace Event
