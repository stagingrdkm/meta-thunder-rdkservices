From b5712f0fd146156cd3aac2870561fdfbd3f4dd1c Mon Sep 17 00:00:00 2001
From: Neeraj Deshpande <n.deshpande@metrological.com>
Date: Sun, 11 Dec 2022 19:11:04 +0530
Subject: [PATCH] RDKDEV-428: Sync-up with Metrological repository.

https://code.rdkcentral.com/r/c/soc/broadcom/components/rdkcentral/thunder/ocdmadapter/+/77969

Change-Id: Ife9ae5bb77143f43acf46e2ed77d286301b75b68
---
 .../broadcom-svp/open_cdm_adapter-secbuf.cpp  | 231 ++++++++++++++++++
 .../adapter/broadcom-svp/open_cdm_adapter.cpp |  27 +-
 2 files changed, 256 insertions(+), 2 deletions(-)
 create mode 100644 Source/ocdm/adapter/broadcom-svp/open_cdm_adapter-secbuf.cpp

diff --git a/Source/ocdm/adapter/broadcom-svp/open_cdm_adapter-secbuf.cpp b/Source/ocdm/adapter/broadcom-svp/open_cdm_adapter-secbuf.cpp
new file mode 100644
index 0000000..784100c
--- /dev/null
+++ b/Source/ocdm/adapter/broadcom-svp/open_cdm_adapter-secbuf.cpp
@@ -0,0 +1,231 @@
+/*
+ * ============================================================================
+ * RDK MANAGEMENT, LLC CONFIDENTIAL AND PROPRIETARY
+ * ============================================================================
+ * This file (and its contents) are the intellectual property of RDK Management, LLC.
+ * It may not be used, copied, distributed or otherwise  disclosed in whole or in
+ * part without the express written permission of RDK Management, LLC.
+ * ============================================================================
+ * Copyright (c) 2020 RDK Management, LLC. All rights reserved.
+ * ============================================================================
+ * Copyright (C) 2020 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
+ * ============================================================================
+ # This program is the proprietary software of Broadcom and/or its licensors,
+ # and may only be used, duplicated, modified or distributed pursuant to the terms and
+ # conditions of a separate, written license agreement executed between you and Broadcom
+ # (an "Authorized License").  Except as set forth in an Authorized License, Broadcom grants
+ # no license (express or implied), right to use, or waiver of any kind with respect to the
+ # Software, and Broadcom expressly reserves all rights in and to the Software and all
+ # intellectual property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU
+ # HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY
+ # NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
+ # Except as expressly set forth in the Authorized License,
+ # 1.     This program, including its structure, sequence and organization, constitutes the valuable trade
+ #    1. secrets of Broadcom, and you shall use all reasonable efforts to protect the confidentiality thereof,
+ # and to use this information only in connection with your use of Broadcom integrated circuit products.
+ # 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
+ # AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS OR
+ # WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
+ # THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES
+ # OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE,
+ # LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION
+ # OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT OF
+ # USE OR PERFORMANCE OF THE SOFTWARE.
+ #
+ # 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR ITS
+ # LICENSORS BE LIABLE FOR  CONSEQUENTIAL, INCIDENTAL, SPECIAL, INDIRECT, OR
+ # EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY RELATING TO YOUR
+ # USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF
+ # THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF THE AMOUNT
+ # ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE
+ # LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF
+ # ANY LIMITED REMEDY.
+ ###############################################################################
+*/
+
+#define MODULE_NAME OCDMAdapter_SVP
+
+#include <core/core.h>
+#include "open_cdm_adapter.h"
+
+#include <gst/gst.h>
+#include <gst/base/gstbytereader.h>
+
+#include <gst_svp_meta.h>
+#include "b_secbuf.h"
+
+struct Rpc_Secbuf_Info {
+    uint8_t *ptr;
+    uint32_t type;
+    size_t   size;
+    void    *token;
+};
+OpenCDMError opencdm_gstreamer_session_decrypt_v2(struct OpenCDMSession* session, GstBuffer* buffer, GstBuffer* subSampleBuffer, const uint32_t subSampleCount,
+                                               const EncryptionScheme encScheme, const EncryptionPattern pattern,
+                                               GstBuffer* IV, GstBuffer* keyID, uint32_t initWithLast15)
+{
+    OpenCDMError result (ERROR_INVALID_SESSION);
+
+    struct Rpc_Secbuf_Info sb_info;
+
+    if (session != nullptr) {
+        if (subSampleBuffer == NULL && IV == NULL && keyID == NULL) {
+            // no encrypted data, skip decryption...
+            return (ERROR_NONE);
+        }
+
+        GstMapInfo dataMap;
+        if (gst_buffer_map(buffer, &dataMap, (GstMapFlags) GST_MAP_READWRITE) == false) {
+            TRACE_L1(_T("Invalid buffer."));
+            return (ERROR_INVALID_DECRYPT_BUFFER);
+        }
+
+        GstMapInfo ivMap;
+        if (gst_buffer_map(IV, &ivMap, (GstMapFlags) GST_MAP_READ) == false) {
+            gst_buffer_unmap(buffer, &dataMap);
+            TRACE_L1(_T("Invalid IV buffer."));
+            return (ERROR_INVALID_DECRYPT_BUFFER);
+        }
+
+        uint8_t *mappedKeyID = nullptr;
+        uint32_t mappedKeyIDSize = 0;
+
+        GstMapInfo keyIDMap;
+        if (keyID != nullptr) {
+            if (gst_buffer_map(keyID, &keyIDMap, (GstMapFlags)GST_MAP_READ) == false) {
+                gst_buffer_unmap(buffer, &dataMap);
+                gst_buffer_unmap(IV, &ivMap);
+                TRACE_L1(_T("Invalid keyID buffer."));
+                return (ERROR_INVALID_DECRYPT_BUFFER);
+            }
+
+            mappedKeyID = reinterpret_cast<uint8_t*>(keyIDMap.data);
+            mappedKeyIDSize = static_cast<uint32_t>(keyIDMap.size);
+        }
+
+        uint8_t* mappedData = reinterpret_cast<uint8_t*>(dataMap.data);
+        uint32_t mappedDataSize = static_cast<uint32_t >(dataMap.size);
+        uint8_t *mappedIV = reinterpret_cast<uint8_t* >(ivMap.data);
+        uint32_t mappedIVSize = static_cast<uint32_t >(ivMap.size);
+        if (subSampleBuffer != nullptr) {
+            GstMapInfo sampleMap;
+
+            if (gst_buffer_map(subSampleBuffer, &sampleMap, GST_MAP_READ) == false) {
+                TRACE_L1(_T("Invalid subsample buffer."));
+                if (keyID != nullptr) {
+                   gst_buffer_unmap(keyID, &keyIDMap);
+                }
+                gst_buffer_unmap(IV, &ivMap);
+                gst_buffer_unmap(buffer, &dataMap);
+                return (ERROR_INVALID_DECRYPT_BUFFER);
+            }
+            uint8_t *mappedSubSample = reinterpret_cast<uint8_t* >(sampleMap.data);
+            uint32_t mappedSubSampleSize = static_cast<uint32_t >(sampleMap.size);
+
+            GstByteReader* reader = gst_byte_reader_new(mappedSubSample, mappedSubSampleSize);
+            uint16_t inClear = 0;
+            uint32_t inEncrypted = 0;
+            uint32_t totalEncrypted = 0;
+            for (unsigned int position = 0; position < subSampleCount; position++) {
+
+                gst_byte_reader_get_uint16_be(reader, &inClear);
+                gst_byte_reader_get_uint32_be(reader, &inEncrypted);
+                totalEncrypted += inEncrypted;
+            }
+            gst_byte_reader_set_pos(reader, 0);
+
+            if(totalEncrypted > 0)
+            {
+                totalEncrypted += sizeof(Rpc_Secbuf_Info); //make sure enough data for metadata
+
+                uint8_t* encryptedData = reinterpret_cast<uint8_t*> (g_malloc(totalEncrypted));
+                uint8_t* encryptedDataIter = encryptedData;
+
+                uint32_t index = 0;
+                for (unsigned int position = 0; position < subSampleCount; position++) {
+
+                    gst_byte_reader_get_uint16_be(reader, &inClear);
+                    gst_byte_reader_get_uint32_be(reader, &inEncrypted);
+
+                    memcpy(encryptedDataIter, mappedData + index + inClear, inEncrypted);
+                    index += inClear + inEncrypted;
+                    encryptedDataIter += inEncrypted;
+                }
+                gst_byte_reader_set_pos(reader, 0);
+
+                result = opencdm_session_decrypt(session, encryptedData, totalEncrypted, encScheme, pattern, mappedIV, mappedIVSize, mappedKeyID, mappedKeyIDSize, initWithLast15);
+
+                if (result == ERROR_NONE) {
+                    memcpy(&sb_info, encryptedData, sizeof(Rpc_Secbuf_Info));
+                    if (B_Secbuf_AllocWithToken(sb_info.size, (B_Secbuf_Type)sb_info.type, sb_info.token, (void**)&sb_info.ptr)) {
+                        TRACE_L1(_T("B_Secbuf_AllocWithToken() failed!"));
+                        TRACE_L1(_T("%u subsamples, totalEncrypted: %u, sb_inf: ptr=%p, type=%i, size=%i, token=%p"), subSampleCount, totalEncrypted, sb_info.ptr, sb_info.type, sb_info.size, sb_info.token);
+                    }
+                    gst_buffer_append_svp_transform(NULL, buffer, subSampleBuffer, subSampleCount, (guint8*) sb_info.ptr);
+                }
+                g_free(encryptedData);
+            } else {
+                // no encrypted data, skip decryption...
+                result = ERROR_NONE;
+            }
+
+            gst_byte_reader_free(reader);
+            gst_buffer_unmap(subSampleBuffer, &sampleMap);
+        } else {
+            uint8_t* encryptedData = NULL;
+            uint8_t* fEncryptedData = NULL;
+            uint32_t totalEncryptedSize = 0;
+            {
+                totalEncryptedSize = mappedDataSize + sizeof(Rpc_Secbuf_Info); //make sure it is enough for metadata
+                encryptedData = (uint8_t*) g_malloc(totalEncryptedSize);
+                fEncryptedData = encryptedData;
+                memcpy(encryptedData, mappedData, mappedDataSize);
+
+                result = opencdm_session_decrypt(session, encryptedData, totalEncryptedSize, encScheme, pattern, mappedIV, mappedIVSize, mappedKeyID, mappedKeyIDSize, initWithLast15);
+
+                if(result == ERROR_NONE){
+                    memcpy(&sb_info, fEncryptedData, sizeof(Rpc_Secbuf_Info));
+                    if (B_Secbuf_AllocWithToken(sb_info.size, (B_Secbuf_Type)sb_info.type, sb_info.token, (void**)&sb_info.ptr)) {
+                        TRACE_L1(_T("B_Secbuf_AllocWithToken() failed!"));
+                        TRACE_L1(_T("no subsamples, encrypted size: %u, sb_inf: ptr=%p, type=%i, size=%i, token=%p"), totalEncryptedSize, sb_info.ptr, sb_info.type, sb_info.size, sb_info.token);
+                    }
+
+                    gst_buffer_append_svp_transform(NULL, buffer, NULL, mappedDataSize, (guint8*) sb_info.ptr);
+                }
+                g_free(fEncryptedData);
+            }
+        }
+
+        if (keyID != nullptr) {
+           gst_buffer_unmap(keyID, &keyIDMap);
+        }
+        gst_buffer_unmap(IV, &ivMap);
+        gst_buffer_unmap(buffer, &dataMap);
+    }
+
+    return (result);
+}
+
+OpenCDMError opencdm_gstreamer_session_decrypt(struct OpenCDMSession* session, GstBuffer* buffer, GstBuffer* subSample, const uint32_t subSampleCount,
+                                                   GstBuffer* IV, GstBuffer* keyID, uint32_t initWithLast15){
+    //Set the Encryption Scheme and Pattern to defaults.
+    EncryptionScheme encScheme = AesCtr_Cenc;
+    EncryptionPattern pattern = {0};
+
+    //Lets try to get Enc Scheme and Pattern from the Protection Metadata.
+    GstProtectionMeta* protectionMeta = reinterpret_cast<GstProtectionMeta*>(gst_buffer_get_protection_meta(buffer));
+    if (protectionMeta != NULL) {
+        const char* cipherModeBuf = gst_structure_get_string(protectionMeta->info, "cipher-mode");
+        if(g_strcmp0(cipherModeBuf,"cbcs") == 0) {
+            encScheme = AesCbc_Cbcs;
+        } else if (gst_structure_has_name(protectionMeta->info, "application/x-cbcs")) {
+            encScheme = AesCbc_Cbcs;
+        }
+
+        gst_structure_get_uint(protectionMeta->info, "crypt_byte_block", &pattern.encrypted_blocks);
+        gst_structure_get_uint(protectionMeta->info, "skip_byte_block", &pattern.clear_blocks);
+    }
+
+    return(opencdm_gstreamer_session_decrypt_v2(session, buffer, subSample, subSampleCount, encScheme, pattern, IV, keyID, initWithLast15));
+}
+
diff --git a/Source/ocdm/adapter/broadcom-svp/open_cdm_adapter.cpp b/Source/ocdm/adapter/broadcom-svp/open_cdm_adapter.cpp
index 391e5d6..570dfda 100644
--- a/Source/ocdm/adapter/broadcom-svp/open_cdm_adapter.cpp
+++ b/Source/ocdm/adapter/broadcom-svp/open_cdm_adapter.cpp
@@ -42,9 +42,9 @@
  # ANY LIMITED REMEDY.
  ###############################################################################
 */
-#include "Module.h"
 
 #include "open_cdm_adapter.h"
+#include "Module.h"
 
 #include <gst/gst.h>
 #include <gst/base/gstbytereader.h>
@@ -97,6 +97,7 @@ OpenCDMError opencdm_gstreamer_session_decrypt(struct OpenCDMSession* session, G
 
         uint8_t *mappedIV = nullptr;
         uint32_t mappedIVSize = 0;
+
         if (mappedBuffer(IV, false, &mappedIV, &mappedIVSize) == false) {
             TRACE_L1("adapter_session_decrypt: Invalid IV buffer.");
             result = ERROR_INVALID_DECRYPT_BUFFER;
@@ -173,8 +174,30 @@ OpenCDMError opencdm_gstreamer_session_decrypt(struct OpenCDMSession* session, G
             ::memcpy(encryptedDataIter, mappedData , mappedDataSize);
 
         }
-        result = opencdm_session_decrypt(session, encryptedData, bufferSize, mappedIV, mappedIVSize,
+     
+        //Set the Encryption Scheme and Pattern to defaults.
+        EncryptionScheme encScheme = AesCtr_Cenc;
+        EncryptionPattern pattern = {0};
+
+        //Lets try to get Enc Scheme and Pattern from the Protection Metadata.
+        GstProtectionMeta* protectionMeta = reinterpret_cast<GstProtectionMeta*>(gst_buffer_get_protection_meta(buffer));
+        if (protectionMeta != NULL) {
+            if (gst_structure_has_name(protectionMeta->info, "application/x-cbcs")) {
+                encScheme = AesCbc_Cbcs;
+            } else {
+                const char* cipherModeBuf = gst_structure_get_string(protectionMeta->info, "cipher-mode");
+                if(g_strcmp0(cipherModeBuf, "cbcs") == 0) {
+                    encScheme = AesCbc_Cbcs;
+                }
+            }
+
+            gst_structure_get_uint(protectionMeta->info, "crypt_byte_block", &pattern.encrypted_blocks);
+            gst_structure_get_uint(protectionMeta->info, "skip_byte_block", &pattern.clear_blocks);
+        }
+
+        result = opencdm_session_decrypt(session, encryptedData, bufferSize, encScheme, pattern, mappedIV, mappedIVSize,
                                          mappedKeyID, mappedKeyIDSize, initWithLast15);
+           
         if (result != ERROR_NONE) {
             TRACE_L1("adapter_session_decrypt: opencdm_session_decrypt failed!");
             ::free(encryptedData);
-- 
2.25.1

