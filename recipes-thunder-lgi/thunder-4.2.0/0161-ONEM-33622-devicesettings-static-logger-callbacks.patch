From aa054e11568e43a12bb5ece6d81ead8b2353ee8f Mon Sep 17 00:00:00 2001
From: Mikolaj Staworzynski <mikolaj.staworzynski@redembedded.com>
Date: Tue, 12 Dec 2023 15:09:03 +0100
Subject: [PATCH] ONEM-33622: devicesettings static logger callbacks
 registrered in WPEFramework

---
 Source/WPEFramework/CMakeLists.txt |  4 +++
 Source/WPEFramework/PluginHost.cpp | 29 ++++++++++++++++++
 cmake/modules/FindDS.cmake         | 49 ++++++++++++++++++++++++++++++
 3 files changed, 82 insertions(+)
 create mode 100644 cmake/modules/FindDS.cmake

diff --git a/Source/WPEFramework/CMakeLists.txt b/Source/WPEFramework/CMakeLists.txt
index 64b7255..612f177 100644
--- a/Source/WPEFramework/CMakeLists.txt
+++ b/Source/WPEFramework/CMakeLists.txt
@@ -34,6 +34,10 @@ add_executable(${TARGET}
         PostMortem.cpp
         )
 
+find_package(DS REQUIRED)
+target_include_directories(${TARGET} PRIVATE ${DS_INCLUDE_DIRS})
+target_link_libraries(${TARGET} PRIVATE ${DS_LIBRARIES})
+
 target_compile_definitions(${TARGET}
         PRIVATE
           NAMESPACE=${NAMESPACE}
diff --git a/Source/WPEFramework/PluginHost.cpp b/Source/WPEFramework/PluginHost.cpp
index 7284cfd..22e6006 100644
--- a/Source/WPEFramework/PluginHost.cpp
+++ b/Source/WPEFramework/PluginHost.cpp
@@ -25,6 +25,9 @@
 #include <syslog.h>
 #endif
 
+#include "dsregisterlog.h"
+#include "dsclientregisterlog.h"
+
 MODULE_NAME_DECLARATION(BUILD_REFERENCE)
 
 namespace WPEFramework {
@@ -407,12 +410,38 @@ POP_WARNING()
         ExitHandler::Destruct();
     }
 
+static void dslogCallback(int priority,const char *buff)
+{
+    if(priority == DS_LOG_LEVEL_INFO)
+    {
+        TRACE_GLOBAL(Trace::Information, (_T("%s"),buff));
+    }
+    else if(priority == DS_LOG_LEVEL_WARN)
+    {
+        TRACE_GLOBAL(Trace::Warning, (_T("%s"), buff));
+    }
+    else if(priority == DS_LOG_LEVEL_ERROR)
+    {
+        TRACE_GLOBAL(Trace::Error, (_T("%s"), buff));
+    }
+    else if(priority == DS_LOG_LEVEL_DEBUG)
+    {
+        TRACE_GLOBAL(Trace::Information, (_T("%s"), buff));
+    }
+    else
+    {
+        TRACE_GLOBAL(Trace::Error, (_T("[%s] invalid priority:0x%x"), __FUNCTION__, priority));
+    }
+}
+
 #ifdef __WINDOWS__
     int _tmain(int argc, _TCHAR* argv[])
 #else
     int main(int argc, char** argv)
 #endif
     {
+        DS_RegisterForLog(dslogCallback);
+        DSClient_RegisterForLog(dslogCallback);
 #ifndef __WINDOWS__
         //Set our Logging Mask and open the Log
         setlogmask(LOG_UPTO(LOG_NOTICE));
diff --git a/cmake/modules/FindDS.cmake b/cmake/modules/FindDS.cmake
new file mode 100644
index 0000000..67bfa6f
--- /dev/null
+++ b/cmake/modules/FindDS.cmake
@@ -0,0 +1,49 @@
+# If not stated otherwise in this file or this component's license file the
+# following copyright and licenses apply:
+#
+# Copyright 2020 RDK Management
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# - Try to find Display Settings library
+# Once done this will define
+#  DS_FOUND - System has DS
+#  DS_INCLUDE_DIRS - The DS include directories
+#  DS_LIBRARIES - The libraries needed to use DS
+#  DS_FLAGS - The flags needed to use DS
+#
+
+find_package(PkgConfig)
+
+find_library(DS_LIBRARIES NAMES ds)
+find_library(DSHAL_LIBRARIES NAMES dshalcli)
+find_path(DS_INCLUDE_DIRS NAMES manager.hpp PATH_SUFFIXES rdk/ds)
+find_path(DSHAL_INCLUDE_DIRS NAMES dsTypes.h PATH_SUFFIXES rdk/ds-hal)
+find_path(DSRPC_INCLUDE_DIRS NAMES dsMgr.h PATH_SUFFIXES rdk/ds-rpc)
+
+set(DS_LIBRARIES ${DS_LIBRARIES} ${DSHAL_LIBRARIES})
+set(DS_LIBRARIES ${DS_LIBRARIES} CACHE PATH "Path to DS library")
+set(DS_INCLUDE_DIRS ${DS_INCLUDE_DIRS} ${DSHAL_INCLUDE_DIRS} ${DSRPC_INCLUDE_DIRS})
+set(DS_INCLUDE_DIRS ${DS_INCLUDE_DIRS} CACHE PATH "Path to DS include")
+
+
+
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(DS DEFAULT_MSG DS_INCLUDE_DIRS DS_LIBRARIES)
+
+mark_as_advanced(
+    DS_FOUND
+    DS_INCLUDE_DIRS
+    DS_LIBRARIES
+    DS_LIBRARY_DIRS
+    DS_FLAGS)
-- 
2.25.1

