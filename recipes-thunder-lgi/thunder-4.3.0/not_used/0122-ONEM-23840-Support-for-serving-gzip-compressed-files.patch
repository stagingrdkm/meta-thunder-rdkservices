From: Mikolaj Staworzynski <mikolaj.staworzynski@redembedded.com>
Date: Fri, 3 Dec 2021 14:20:12 +0100
Subject: [PATCH] [ONEM-23840] Support for serving gzip compressed filesystem
 content

For example pre-compressed javascript files like bundle.js.gz
---
 Source/plugins/Service.cpp         |  7 ++++--
 Source/websocket/WebRequest.h      |  4 ++--
 Source/websocket/WebSerializer.cpp | 34 +++++++++++++++++-------------
 3 files changed, 26 insertions(+), 19 deletions(-)

diff --git a/Source/plugins/Service.cpp b/Source/plugins/Service.cpp
index d3b29ad..c82b10a 100644
--- a/Source/plugins/Service.cpp
+++ b/Source/plugins/Service.cpp
@@ -89,10 +89,10 @@ namespace PluginHost {
     void Service::FileToServe(const string& webServiceRequest, Web::Response& response)
     {
         Web::MIMETypes result;
+        Web::EncodingTypes encoding = Web::ENCODING_UNKNOWN;
         uint16_t offset = static_cast<uint16_t>(_config.WebPrefix().length()) + (_webURLPath.empty() ? 1 : static_cast<uint16_t>(_webURLPath.length()) + 2);
         string fileToService = _webServerFilePath;
-
-        if ((webServiceRequest.length() <= offset) || (Web::MIMETypeForFile(webServiceRequest.substr(offset, -1), fileToService, result) == false)) {
+        if ((webServiceRequest.length() <= offset) || (Web::MIMETypeAndEncodingForFile(webServiceRequest.substr(offset, -1), fileToService, result, encoding) == false)) {
             Core::ProxyType<Web::FileBody> fileBody(IFactories::Instance().FileBody());
 
             // No filename gives, be default, we go for the index.html page..
@@ -103,6 +103,9 @@ namespace PluginHost {
             Core::ProxyType<Web::FileBody> fileBody(IFactories::Instance().FileBody());
             *fileBody = fileToService;
             response.ContentType = result;
+            if (encoding != Web::ENCODING_UNKNOWN) {
+                response.ContentEncoding = encoding;
+            }
             response.Body<Web::FileBody>(fileBody);
         }
     }
diff --git a/Source/websocket/WebRequest.h b/Source/websocket/WebRequest.h
index 993a58c..9913aae 100644
--- a/Source/websocket/WebRequest.h
+++ b/Source/websocket/WebRequest.h
@@ -62,13 +62,13 @@ namespace Web {
         MIME_UNKNOWN
     };
 
-    bool EXTERNAL MIMETypeForFile(const string path, string& fileToService, MIMETypes& mimeType);
-
     enum EncodingTypes {
         ENCODING_GZIP,
         ENCODING_UNKNOWN
     };
 
+    bool EXTERNAL MIMETypeAndEncodingForFile(const string path, string& fileToService, MIMETypes& mimeType, EncodingTypes& encoding);
+
     enum TransferTypes {
         TRANSFER_CHUNKED,
         TRANSFER_UNKNOWN
diff --git a/Source/websocket/WebSerializer.cpp b/Source/websocket/WebSerializer.cpp
index 5f6642c..114d033 100644
--- a/Source/websocket/WebSerializer.cpp
+++ b/Source/websocket/WebSerializer.cpp
@@ -359,8 +359,17 @@ namespace Web
         return (Core::EnumerateType<type>(value).Data());
     }
 
+    bool EndsWithCaseInsensitive(const string& mainStr, const string& toMatch)
+    {
+        auto it = toMatch.begin();
+        return mainStr.size() >= toMatch.size() &&
+                std::all_of(std::next(mainStr.begin(),mainStr.size() - toMatch.size()), mainStr.end(), [&it](const char & character) {
+                    return ::tolower(character) == *(it++);
+                });
+    }
+
     // Find the correct file to serve
-    bool MIMETypeForFile(const string path, string& fileToService, MIMETypes& mimeType)
+    bool MIMETypeAndEncodingForFile(const string path, string& fileToService, MIMETypes& mimeType, EncodingTypes& encoding)
     {
         mimeType = Web::MIME_UNKNOWN;
         bool filePresent = false;
@@ -380,26 +389,21 @@ namespace Web
         }
 
         if (filePresent == true) {
-            int position = static_cast<int>(fileToService.rfind('.', -1));
-
+            string fileName = fileToService;
+            int position = static_cast<int>(fileName.rfind('.', -1));
+            if (EndsWithCaseInsensitive(fileName, ".gz")) {
+                encoding = EncodingTypes::ENCODING_GZIP;
+                fileName.resize(fileName.size() - 3);
+                position = static_cast<int>(fileName.rfind('.', -1));
+            }
             // See if we have an extension to go on..
             if (position != -1) {
                 uint16_t index = 0;
-                uint16_t length = static_cast<uint16_t>(fileToService.length()) - (++position);
 
                 // Seems we have an extension, what is it
                 while ((mimeType == Web::MIME_UNKNOWN) && (index < (sizeof(extensionLookupTable) / sizeof(FileExtensionTable)))) {
-                    // Miimum should be the same length...
-                    if (extensionLookupTable[index].length == length) {
-                        uint16_t item = 0;
-
-                        while ((item < length) && (tolower(fileToService[position + item]) == extensionLookupTable[index].fileExtension[item])) {
-                            item++;
-                        }
-
-                        if (item == length) {
-                            mimeType = extensionLookupTable[index].type;
-                        }
+                    if (EndsWithCaseInsensitive(fileName, extensionLookupTable[index].fileExtension)) {
+                        mimeType = extensionLookupTable[index].type;
                     }
 
                     index++;
-- 
2.25.1

