From 2bc41e243d2ccd33feae2b57f27757c31d9af15e Mon Sep 17 00:00:00 2001
From: Mikolaj Staworzynski <mikolaj.staworzynski@redembedded.com>
Date: Fri, 4 Aug 2023 13:37:46 +0200
Subject: [PATCH] ONEM-31419: MessageUnit adaptation

---
 Source/messaging/MessageUnit.cpp | 54 ++++++++++++++++++++++++++------
 1 file changed, 45 insertions(+), 9 deletions(-)

diff --git a/Source/messaging/MessageUnit.cpp b/Source/messaging/MessageUnit.cpp
index e81fbd0..da25092 100644
--- a/Source/messaging/MessageUnit.cpp
+++ b/Source/messaging/MessageUnit.cpp
@@ -124,19 +124,54 @@ namespace WPEFramework {
 
 #ifdef TRACING_ONLY_DIRECT_OUTPUT
         /**
-         * @brief in case of direct output, we do nothing
-         */
+        * @brief Open MessageUnit. This method is used on the WPEFramework side.
+        *        This method:
+        *        - sets env variables, so the OOP components will get information (eg. where to place its files)
+        *        - create buffer where all InProcess components will write
+        *
+        * @param pathName volatile path (/tmp/ by default)
+        * @param socketPort triggers the use of using a IP socket in stead of a domain socket (in pathName) if the port value is not 0.
+        */
         uint32_t MessageUnit::Open(const string& pathName, const uint16_t socketPort, const string& configuration, const bool background, const flush flushMode)
         {
-            _direct.Mode(_settings.IsBackground(), _settings.IsAbbreviated());
+            uint32_t result = Core::ERROR_OPENING_FAILED;
 
-            Core::Messaging::IStore::Set(this);
+            string basePath = Core::Directory::Normalize(pathName) + _T("MessageDispatcher");
+            string identifier = _T("md");
 
-            // according to received config,
-            // let all announced controls know, whether they should push messages
-            Update();
-            _opened = true;
-            return Core::ERROR_NONE;
+            ASSERT(_dispatcher == nullptr);
+
+            if (Core::File(basePath).IsDirectory() == true) {
+                //if directory exists remove it to clear data (eg. sockets) that can remain after previous run
+                Core::Directory(basePath.c_str()).Destroy();
+            }
+
+            if (Core::Directory(basePath.c_str()).CreatePath() == false) {
+                TRACE_L1("Unable to create MessageDispatcher directory");
+            }
+
+            _settings.Configure(basePath, identifier, socketPort, configuration, background, flushMode);
+
+            // Store it on an environment variable so other instances can pick this info up..
+            _settings.Save();
+
+            _dispatcher.reset(new MessageDispatcher(*this, identifier, 0, basePath, socketPort));
+            ASSERT(_dispatcher != nullptr);
+
+            if ( (_dispatcher != nullptr) && (_dispatcher->IsValid() == true) )  {
+
+                _direct.Mode(_settings.IsBackground(), _settings.IsAbbreviated());
+
+                Core::Messaging::IStore::Set(this);
+
+                // according to received config,
+                // let all announced controls know, whether they should push messages
+                Update();
+                _opened = true;
+                result = Core::ERROR_NONE;
+            }
+
+            return (result);
         }
 
         uint32_t MessageUnit::Open(const uint32_t instanceId)
@@ -173,6 +208,7 @@ namespace WPEFramework {
                 _adminLock.Lock();
                 _dispatcher.reset(nullptr);
                 _adminLock.Unlock();
+                _opened = false;
             } else {
                 TRACE_L1("MessageUnit not opened or already closed");
             }
-- 
2.25.1

