From 054ee3d455df5bac9fd580276bd09fe281ec0834 Mon Sep 17 00:00:00 2001
From: Anand Kandasamy <Anand_Kandasamy@comcast.com>
Date: Fri, 19 Mar 2021 17:22:11 -0400
Subject: [PATCH] RDK:28534: Security Agent Utility and Logging
---
 Source/WPEFramework/CMakeLists.txt        |  5 ++
 Source/WPEFramework/Controller.cpp        |  3 ++
 Source/WPEFramework/ControllerJsonRpc.cpp |  2 +-
 Source/WPEFramework/PluginServer.cpp      | 20 +++++++-
 Source/WPEFramework/PluginServer.h        | 60 ++++++++++++++++++++---
 cmake/modules/FindRFC.cmake               | 23 +++++++++
 6 files changed, 104 insertions(+), 9 deletions(-)
 create mode 100644 cmake/modules/FindRFC.cmake
diff --git a/Source/WPEFramework/CMakeLists.txt b/Source/WPEFramework/CMakeLists.txt
index 37abdecc..a4a90265 100644
--- a/Source/WPEFramework/CMakeLists.txt
+++ b/Source/WPEFramework/CMakeLists.txt
@@ -17,6 +17,8 @@

 find_package(Threads REQUIRED)

+find_package(RFC)
+
 get_filename_component(TARGET ${CMAKE_CURRENT_SOURCE_DIR} NAME)

 set(THREADPOOL_COUNT "4" CACHE STRING "The number of threads in the thread pool")
@@ -52,6 +54,8 @@ if (EXCEPTION_CATCHING)
     set_source_files_properties( PluginServer.cpp PROPERTIES COMPILE_FLAGS "-fexceptions" )
 endif()

+target_include_directories(${TARGET} PRIVATE ${RFC_INCLUDE_DIRS})
+
 target_link_libraries(${TARGET}
         PRIVATE
           CompileSettingsDebug::CompileSettingsDebug
@@ -62,6 +66,7 @@ target_link_libraries(${TARGET}
           ${NAMESPACE}WebSocket::${NAMESPACE}WebSocket
           ${NAMESPACE}Plugins::${NAMESPACE}Plugins
           ${NAMESPACE}COMProcess::${NAMESPACE}COMProcess  # For COM executable define
+          ${RFC_LIBRARIES}
           Threads::Threads
         )

diff --git a/Source/WPEFramework/Controller.cpp b/Source/WPEFramework/Controller.cpp
index 581aca7e..f1192572 100644
--- a/Source/WPEFramework/Controller.cpp
+++ b/Source/WPEFramework/Controller.cpp
@@ -489,6 +489,9 @@ namespace Plugin {
                     if (callSign == _service->Callsign()) {
                         result->ErrorCode = Web::STATUS_FORBIDDEN;
                         result->Message = _T("The PluginHost Controller can not be deactivated.");
+                    } else if (callSign == _T("SecurityAgent")) {
+                        result->ErrorCode = Web::STATUS_FORBIDDEN;
+                        result->Message = _T("SecurityAgent plugin can not be deactivated.");
                     } else {
                         Core::ProxyType<PluginHost::Server::Service> pluginInfo(FromIdentifier(callSign));

diff --git a/Source/WPEFramework/ControllerJsonRpc.cpp b/Source/WPEFramework/ControllerJsonRpc.cpp
index 6fb53cec..f806aadb 100644
--- a/Source/WPEFramework/ControllerJsonRpc.cpp
+++ b/Source/WPEFramework/ControllerJsonRpc.cpp
@@ -132,7 +132,7 @@ namespace Plugin {

         ASSERT(_pluginServer != nullptr);

-        if (callsign != Callsign()) {
+        if (callsign != Callsign() && (callsign != _T("SecurityAgent"))) {
             Core::ProxyType<PluginHost::Server::Service> service;

             if (_pluginServer->Services().FromIdentifier(callsign, service) == Core::ERROR_NONE) {
diff --git a/Source/WPEFramework/PluginServer.cpp b/Source/WPEFramework/PluginServer.cpp
index 0bb2e8d4..ae0b9664 100644
--- a/Source/WPEFramework/PluginServer.cpp
+++ b/Source/WPEFramework/PluginServer.cpp
@@ -925,6 +925,25 @@ POP_WARNING()
             securityProvider->Security(false);
         } else {
             SYSLOG(Logging::Startup, (_T("Security ENABLED, incoming requests need to be authorized!!!")));
+
+            // If RFC for Thunder Security is set to false, disable security.
+            if(_services.isThunderSecurityEnabled())
+            {
+                SYSLOG(Logging::Startup, (_T("Security ENABLED, incoming requests need to be authorized!!!")));
+                //activate Security Agent Plugin
+                Core::ProxyType<Service> service;
+                uint32_t result = _services.FromIdentifier("SecurityAgent", service);
+               if(result == Core::ERROR_NONE)
+                {
+                    service->Activate(PluginHost::IShell::STARTUP);
+                }
+
+            }
+            else
+            {
+                SYSLOG(Logging::Startup, (_T("Security DISABLED. Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.ThunderSecurity.Enable set to false")));
+                securityProvider->Security(false);
+            }
         }

         securityProvider->Release();

diff --git a/Source/WPEFramework/PluginServer.h b/Source/WPEFramework/PluginServer.h
index 5aac359d..aa1d586f 100644
--- a/Source/WPEFramework/PluginServer.h
+++ b/Source/WPEFramework/PluginServer.h
@@ -34,6 +34,8 @@
 #error "Please define the name of the COM process!!!"
 #endif

+#include "rfcapi.h"
+
 #define MAX_EXTERNAL_WAITS 2000 /* Wait for 2 Seconds */

 namespace WPEFramework {
@@ -2059,8 +2061,11 @@ POP_WARNING()
                 , _server(server)
                 , _subSystems(this)
                 , _authenticationHandler(nullptr)
+                , _enableThunderSecurity(true) // Thunder Security is enabled by Default.
                 , _configObserver(*this, config.PluginConfigPath())
             {
+                // If RFC for Thunder Security is set to false, disable security.
+                getRFC("Device.DeviceInfo.X_RDKCENTRAL-COM_RFC.Feature.ThunderSecurity.Enable",_enableThunderSecurity);
             }
 POP_WARNING()
             ~ServiceMap()
@@ -2070,12 +2075,41 @@ POP_WARNING()
             }

         public:
+
+            inline bool getRFC(const string& name, bool& response)
+            {
+                bool retVal = false;
+
+                RFC_ParamData_t param = {};
+
+                WDMP_STATUS status = getRFCParameter(const_cast<char*>("WPEFramework"), name.c_str(), &param);
+                SYSLOG(Logging::Startup, (_T("name = %s, type = %d, value = %s"), param.name, param.type, param.value));
+
+                if (status == WDMP_SUCCESS)
+                {
+                    response = (strncmp(param.value, "true", strlen("true")) == 0);
+                    retVal = true;
+                }
+                else
+                {
+                    SYSLOG(Logging::Startup, (_T("getRFCParameter fail : %s"), getRFCErrorString(status)));
+                }
+
+
+                return retVal;
+            }
+
+            inline bool isThunderSecurityEnabled()
+            {
+                return _enableThunderSecurity;
+            }
+
             inline void Security(const bool enabled)
             {
                 _adminLock.Lock();

                 if ((_authenticationHandler == nullptr) ^ (enabled == false)) {
-                    if (_authenticationHandler == nullptr) {
+                    if ((_authenticationHandler == nullptr) && _enableThunderSecurity) {
                         // Let get the AuthentcationHandler.
                         _authenticationHandler = reinterpret_cast<IAuthenticate*>(QueryInterfaceByCallsign(IAuthenticate::ID, _subSystems.SecurityCallsign()));
                     } else {
@@ -2529,6 +2563,7 @@ POP_WARNING()
             Server& _server;
             Core::Sink<SubSystems> _subSystems;
             IAuthenticate* _authenticationHandler;
+            bool _enableThunderSecurity;
             ConfigObserver _configObserver;
         };

@@ -3072,9 +3107,20 @@ POP_WARNING()
                     break;
                 }
                 case Request::UNAUTHORIZED: {
-                    // Report that we, at least, need a call sign.
-                    Submit(_unauthorizedRequest);
-                    break;
+                    // Report that request is unauthorized.
+                        Core::ProxyType<Web::Response> response = IFactories::Instance().Response();
+                        Core::ProxyType<Core::JSONRPC::Message> body(Core::ProxyType<Core::JSONRPC::Message>(IFactories::Instance().JSONRPC()));
+
+                        Core::ProxyType<Core::JSONRPC::Message> message(request->Body<Core::JSONRPC::Message>());
+                        if(message.IsValid())
+                            body->Id = message->Id;
+
+                        body->JSONRPC = Core::JSONRPC::Message::DefaultVersion;
+                        body->Error.SetError(Core::ERROR_PRIVILIGED_REQUEST);
+                        body->Error.Text = _T("Request needs authorization. Missing or invalid token.");
+                        response->Body(body);
+                        Submit(response);
+                        break;
                 }
                 case Request::COMPLETE: {
                     Core::ProxyType<Service> service(request->Service());
@@ -3152,10 +3198,9 @@ POP_WARNING()
                         PluginHost::Channel::Unlock();

                         if (securityClearance == false) {
-                            // Oopsie daisy we are not allowed to handle this request.
-                            // TODO: How shall we report back on this?
+                            SYSLOG(Logging::Startup, (_T("Security failed, incoming request is not authorized.")));
                             message->Error.SetError(Core::ERROR_PRIVILIGED_REQUEST);
-                            message->Error.Text = _T("method invokation not allowed.");
+                            message->Error.Text = _T("Request needs authorization. Missing or invalid token.");
                             Submit(Core::ProxyType<Core::JSON::IElement>(message));
                         }
                     }
diff --git a/cmake/modules/FindRFC.cmake b/cmake/modules/FindRFC.cmake
new file mode 100644
index 00000000..57426f59
--- /dev/null
+++ b/cmake/modules/FindRFC.cmake
@@ -0,0 +1,23 @@
+# - Try to find RFC components
+# Once done this will define
+#  RFC_FOUND - System has RFC
+#  RFC_LIBRARIES - The libraries needed to use  RFC
+#  RFC_INCLUDE_DIRS - The headers needed to use RFC
+
+find_package(PkgConfig)
+
+find_library(RFC_LIBRARIES NAMES rfcapi)
+find_path(RFC_INCLUDE_DIRS NAMES rfcapi.h )
+find_path(WDMP_INCLUDE_DIRS NAMES wdmp-c.h PATH_SUFFIXES wdmp-c)
+
+set(RFC_INCLUDE_DIRS ${RFC_INCLUDE_DIRS} ${WDMP_INCLUDE_DIRS} )
+set(RFC_INCLUDE_DIRS ${RFC_INCLUDE_DIRS} ${WDMP_INCLUDE_DIRS} CACHE PATH "Path to RFC include")
+
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(RFC DEFAULT_MSG RFC_INCLUDE_DIRS RFC_LIBRARIES)
+
+mark_as_advanced(
+    RFC_FOUND
+    RFC_INCLUDE_DIRS
+    RFC_LIBRARIES)
+

