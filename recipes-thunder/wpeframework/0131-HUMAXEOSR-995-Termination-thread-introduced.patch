From: Mikolaj Staworzynski <mikolaj.staworzynski@redembedded.com>
Date: Mon, 21 Feb 2022 23:26:49 +0100
Subject: [PATCH] [HUMAXEOSR-995] Termination thread introduced

to properly handle SIGTERM, SIGINT, SIGQUIT
---
 Source/WPEProcess/Process.cpp | 58 ++++++++++++++++++++++-------------
 1 file changed, 37 insertions(+), 21 deletions(-)

diff --git a/Source/WPEProcess/Process.cpp b/Source/WPEProcess/Process.cpp
index 06c8593..90edd52 100644
--- a/Source/WPEProcess/Process.cpp
+++ b/Source/WPEProcess/Process.cpp
@@ -397,15 +397,20 @@ public:
 
         TRACE_L1("Spawning a new process: %d.", Core::ProcessInfo().Id());
         #ifndef __WINDOWS__
-        struct sigaction sa;
-        memset(&sa, 0, sizeof(struct sigaction));
-        sigemptyset(&sa.sa_mask);
-        sa.sa_handler = ExitDaemonHandler;
-        sa.sa_flags = 0; // not SA_RESTART!;
-
-        sigaction(SIGINT, &sa, nullptr);
-        sigaction(SIGTERM, &sa, nullptr);
-        sigaction(SIGQUIT, &sa, nullptr);
+        sigset_t signals;
+        sigemptyset(&signals);
+        sigaddset(&signals, SIGINT);
+        sigaddset(&signals, SIGTERM);
+        sigaddset(&signals, SIGQUIT);
+        pthread_sigmask(SIG_BLOCK, &signals, 0);
+        TRACE_L1("Starting termination thread");
+        pthread_t tid;
+        if (pthread_create(&tid, NULL, TerminationThread, NULL) != 0) {
+            TRACE_L1("Cannot create thread");
+            exit(0);
+        } else {
+            TRACE_L1("Termination thread created");
+        }
         #endif
         std::set_terminate(UncaughtExceptions);
     }
@@ -436,6 +441,15 @@ public:
             _engine.Release();
         }
 
+        #ifndef __WINDOWS__
+        uint32_t instances = Core::ServiceAdministrator::Instance().Instances();
+        if (instances > 0) {
+            TRACE_L1("Abnormal process termination with %d instances just self killing", instances);
+            kill(getpid(), SIGKILL);
+            sleep(10);
+        }
+        #endif
+
         // We are going to tear down the stugg. Unregistere the Worker Pool
         Core::IWorkerPool::Assign(nullptr);
         PluginHost::IFactories::Assign(nullptr);
@@ -499,20 +513,22 @@ public:
 
 private:
     #ifndef __WINDOWS__
-    static void ExitDaemonHandler(int signo)
+    static void *TerminationThread(void* data)
     {
-        TRACE_L1("Signal received %d.", signo);
-        syslog(LOG_NOTICE, "Signal received %d.", signo);
-
-        if ((signo == SIGTERM) || (signo == SIGQUIT)) {
-
+        sigset_t signals;
+        sigemptyset(&signals);
+        sigaddset(&signals, SIGINT);
+        sigaddset(&signals, SIGTERM);
+        sigaddset(&signals, SIGQUIT);
+        int signal;
+        TRACE_L1("TerminationThread: waiting for signals");
+        int error = sigwait(&signals, &signal);
+        if (error) {
+            TRACE_L1("TerminationThread: error on sigwait");
+        } else {
+            TRACE_L1("TerminationThread: signal received: %d", signal);
             ProcessFlow::Abort();
-
-        } else if (signo == SIGSEGV) {
-            Logging::DumpException(_T("SEIGSEGV"));
-            // now invoke the default segfault handler
-            signal(signo, SIG_DFL);
-            kill(getpid(), signo);
+            TRACE_L1("TerminationThread: abort done");
         }
     }
     #endif
-- 
2.25.1

