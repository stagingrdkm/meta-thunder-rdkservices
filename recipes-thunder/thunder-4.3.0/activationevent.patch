diff --git a/Source/WPEFramework/Controller.cpp b/Source/WPEFramework/Controller.cpp
index 581aca7e..18dd27dc 100644
--- a/Source/WPEFramework/Controller.cpp
+++ b/Source/WPEFramework/Controller.cpp
@@ -614,6 +614,15 @@ namespace Plugin {
         return (result);
     }
 
+    void Controller::Activation(const string& callsign, PluginHost::IShell* plugin)
+    {
+        event_statechange(callsign, PluginHost::IShell::ACTIVATION, plugin->Reason());
+    }
+    void Controller::Deactivation(const string& callsign, PluginHost::IShell* plugin)
+    {
+        event_statechange(callsign, PluginHost::IShell::DEACTIVATION, plugin->Reason());
+    }
+
     void Controller::Activated(const string& callsign, PluginHost::IShell* plugin)
     {
         event_statechange(callsign, PluginHost::IShell::ACTIVATED, plugin->Reason());
diff --git a/Source/WPEFramework/Controller.h b/Source/WPEFramework/Controller.h
index fcd30eab..d7dd861c 100644
--- a/Source/WPEFramework/Controller.h
+++ b/Source/WPEFramework/Controller.h
@@ -141,6 +141,14 @@ namespace Plugin {
             {
                 _parent.Activated(callsign, plugin);
             }
+            void Activation(const string& callsign, PluginHost::IShell* plugin) override
+            {
+                _parent.Activation(callsign, plugin);
+            }
+            void Deactivation(const string& callsign, PluginHost::IShell* plugin) override
+            {
+                _parent.Deactivation(callsign, plugin);
+            }
             void Deactivated(const string& callsign, PluginHost::IShell* plugin) override
             {
                 _parent.Deactivated(callsign, plugin);
@@ -389,7 +397,9 @@ POP_WARNING()
         Core::ProxyType<Web::Response> GetMethod(Core::TextSegmentIterator& index) const;
         Core::ProxyType<Web::Response> PutMethod(Core::TextSegmentIterator& index, const Web::Request& request);
         Core::ProxyType<Web::Response> DeleteMethod(Core::TextSegmentIterator& index, const Web::Request& request);
+        void Activation(const string& callsign, PluginHost::IShell* plugin);
         void Activated(const string& callsign, PluginHost::IShell* plugin);
+        void Deactivation(const string& callsign, PluginHost::IShell* plugin);
         void Deactivated(const string& callsign, PluginHost::IShell* plugin);
         void Unavailable(const string& callsign, PluginHost::IShell* plugin);
 
diff --git a/Source/WPEFramework/PluginServer.cpp b/Source/WPEFramework/PluginServer.cpp
index c3e245ca..8691697e 100644
--- a/Source/WPEFramework/PluginServer.cpp
+++ b/Source/WPEFramework/PluginServer.cpp
@@ -400,7 +400,7 @@ namespace PluginHost
             } else {
 
                 State(ACTIVATION);
-
+                _administrator.Activation(callSign, this);
                 Unlock();
 
                 // Before we dive into the "new" initialize lets see if this has a pending OOP running, if so forcefully kill it now, no time to wait !
@@ -533,6 +533,7 @@ namespace PluginHost
                 ASSERT(_handler != nullptr);
 
                 State(DEACTIVATION);
+                _administrator.Deactivation(callSign, this);
                 if( currentState == IShell::ACTIVATED ) {
                 _administrator.Deactivated(callSign, this);
                 }
diff --git a/Source/WPEFramework/PluginServer.h b/Source/WPEFramework/PluginServer.h
index f2a8fe17..d96cf7ec 100644
--- a/Source/WPEFramework/PluginServer.h
+++ b/Source/WPEFramework/PluginServer.h
@@ -2044,6 +2044,17 @@ POP_WARNING()
 
                 _notificationLock.Unlock();
             }
+            void Activation(const string& callsign, PluginHost::IShell* entry)
+            {
+                _notificationLock.Lock();
+                std::list<PluginHost::IPlugin::INotification*> currentlist(_notifiers);
+                while (currentlist.size()) {
+                    currentlist.front()->Activation(callsign, entry);
+                    currentlist.pop_front();
+                }
+                _notificationLock.Unlock();
+            }
+
             void Activated(const string& callsign, PluginHost::IShell* entry)
             {
                 _notificationLock.Lock();
@@ -2058,6 +2069,16 @@ POP_WARNING()
                 _notificationLock.Unlock();
             }
 
+            void Deactivation(const string& callsign, PluginHost::IShell* entry)
+            {
+                _notificationLock.Lock();
+                std::list<PluginHost::IPlugin::INotification*> currentlist(_notifiers);
+                while (currentlist.size()) {
+                    currentlist.front()->Deactivation(callsign, entry);
+                    currentlist.pop_front();
+                }
+                _notificationLock.Unlock();
+            }
             void Deactivated(const string& callsign, PluginHost::IShell* entry)
             {
                 _notificationLock.Lock();
diff --git a/Source/plugins/IPlugin.h b/Source/plugins/IPlugin.h
index be1babb3..322370f9 100644
--- a/Source/plugins/IPlugin.h
+++ b/Source/plugins/IPlugin.h
@@ -53,6 +53,8 @@ namespace PluginHost {
             //! on this state change.
             //! @}
             virtual void Activated(const string& callsign, IShell* plugin) = 0;
+            virtual void Activation(const string& callsign, IShell* plugin) = 0;
+            virtual void Deactivation(const string& callsign, IShell* plugin) = 0;
             virtual void Deactivated(const string& callsign, IShell* plugin) = 0;
             virtual void Unavailable(const string& callsign, IShell* plugin) = 0;
 
diff --git a/Source/plugins/Types.h b/Source/plugins/Types.h
index 98b22297..bf783571 100644
--- a/Source/plugins/Types.h
+++ b/Source/plugins/Types.h
@@ -126,6 +126,10 @@ namespace PluginHost {
             END_INTERFACE_MAP
 
         private:
+            void Activation(const string& name, PluginHost::IShell* plugin) override
+            {
+            }
+
             void Activated(const string& name, PluginHost::IShell* plugin) override
             {
                 if (_callsign == name) {
@@ -151,6 +155,11 @@ namespace PluginHost {
                     _adminLock.Unlock();
                 }
             }
+
+            void Deactivation(const string& name, PluginHost::IShell* plugin) override
+            {
+            }
+
             void Deactivated(const string& name, PluginHost::IShell* plugin) override
             {
                 if (_callsign == name) {

