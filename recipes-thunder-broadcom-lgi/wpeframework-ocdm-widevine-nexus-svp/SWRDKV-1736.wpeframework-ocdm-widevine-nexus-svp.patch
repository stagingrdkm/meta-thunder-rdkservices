#
# In some configuration, it is not allowed to put the encrypted input butter in CRR(Secure)
#  in order to avoid any security hole. Input buffer in GLR(Full access) and output buffer in
#  CRR is the configuration supported in all configuration
#
--- old/MediaSession.cpp	2019-02-28 10:16:33.425738658 -0500
+++ new/MediaSession.cpp	2019-02-28 10:24:19.755008873 -0500
@@ -40,6 +40,7 @@
     uint32_t type;
     size_t   size;
     void    *token;
+    void    *token_enc;
     uint32_t subsamples_count;
     uint32_t subsamples[];
 };
@@ -364,16 +364,29 @@
 
   uint8_t *desc = nullptr;
   Rpc_Secbuf_Info *pRPCsecureBufferInfo;
+  B_Secbuf_Info secureBufferInfo;  
 
-  void *pOpaqueData;
+  void *pOpaqueData, *pOpaqueDataEnc;
 
   pRPCsecureBufferInfo = (Rpc_Secbuf_Info*)malloc(f_cbData);
   ::memcpy(pRPCsecureBufferInfo, f_pbData, f_cbData);
 
-  if (B_Secbuf_AllocWithToken(pRPCsecureBufferInfo->size, (B_Secbuf_Type)pRPCsecureBufferInfo->type, pRPCsecureBufferInfo->token, &pOpaqueData)) {
+  // Allocate a secure buffer for decrypted data, output of decrypt
+  if (B_Secbuf_Alloc(pRPCsecureBufferInfo->size, B_Secbuf_Type_eSecure, &pOpaqueData)) {
+        printf("B_Secbuf_Alloc() failed!\n");
+        return status;
+  }  
+  B_Secbuf_GetBufferInfo(pOpaqueData, &secureBufferInfo);
+  pRPCsecureBufferInfo->token = secureBufferInfo.token;
+  ::memcpy((void*)f_pbData, pRPCsecureBufferInfo, f_cbData); // Update token for WPE to get the secure buffer
+
+  // Allocate with a token for encrypted data, input of decrypt
+  if (B_Secbuf_AllocWithToken(pRPCsecureBufferInfo->size, B_Secbuf_Type_eGeneric, pRPCsecureBufferInfo->token_enc, &pOpaqueDataEnc)) {
         printf("B_Secbuf_AllocWithToken() failed!\n");
         return status;
   }  
+  // copy all samples data including clear one too
+  B_Secbuf_ImportData(pOpaqueData, 0, (unsigned char*)pOpaqueDataEnc, pRPCsecureBufferInfo->size, 1); 
 
   if (widevine::Cdm::kSuccess == m_cdm->getKeyStatuses(m_sessionId, &map)) {
     widevine::Cdm::KeyStatusMap::iterator it = map.begin();
@@ -391,7 +404,7 @@
         output.is_secure = true;
          
         widevine::Cdm::InputBuffer input;
-        input.data = output.data;;
+        input.data = reinterpret_cast<uint8_t*>(pOpaqueDataEnc)+inTotal+inClear;
         input.data_length = output.data_length;
         input.key_id = keyId;
         input.key_id_length = keyIdLength;
@@ -418,7 +431,10 @@
 
       } // subsampling loop
       free(pRPCsecureBufferInfo);
-      B_Secbuf_Free(pOpaqueData);
+      // only freeing desc here, pOpaqueData will be freed by WPE in gstreamer
+      B_Secbuf_FreeDesc(pOpaqueData); 
+      // Encrypted data does not need anymore, freeing
+      B_Secbuf_Free(pOpaqueDataEnc);
     }
 
   }
