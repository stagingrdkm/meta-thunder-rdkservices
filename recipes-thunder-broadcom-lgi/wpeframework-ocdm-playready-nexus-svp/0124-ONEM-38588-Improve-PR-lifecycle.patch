Piotr Andrzejewski <piotr.andrzejewski@redembedded.com>
Wed, 16 Apr 2025 19:09:50 +0000

diff --git a/MediaSystem.cpp b/MediaSystem.cpp
index 6b7fd41..a76e1d1 100644
--- a/MediaSystem.cpp
+++ b/MediaSystem.cpp
@@ -91,6 +91,7 @@ struct KeySystemCtx
     std::array<uint8_t, MINIMUM_APPCONTEXT_OPAQUE_BUFFER_SIZE> opaqueBuffer{};
     std::array<uint8_t, REVOCATION_BUFFER_SIZE > revocationBuffer{};
     int32_t mediaKeySessionsCount{};
+    int32_t refCount{};
 };
 
 namespace {
@@ -281,12 +282,50 @@ public:
         }
     }
 
+    //IMediaKeysExt API
+    CDMi_RESULT InitializeCtx(const std::string& keySystem) override
+    {
+        LOGGER(LINFO_, "Key system: %s", keySystem.c_str());
+        CDMi_RESULT cr = CDMi_SUCCESS;
+        /* TODO: Enable with ONEM-40865
+        SafeCriticalSection systemLock(drmAppContextMutex_);
+        CDMi_RESULT cr = InitializeSystemRefCounted(keySystem);
+        if (cr == CDMi_SUCCESS) {
+            auto it = m_keySystemCtxs.find(keySystem);
+            ASSERT(it != m_keySystemCtxs.end());
+            it->second->refCount++;
+            LOGGER(LINFO_, "Key system: %s, ref count: %d\n", keySystem.c_str(), it->second->refCount);
+        }*/
+        return cr;
+    }
+
+    //IMediaKeysExt API
+    CDMi_RESULT DeinitializeCtx(const std::string& keySystem, bool cleanOnDestroy) override
+    {
+        LOGGER(LINFO_, "Key system: %s, clean on destroy: %d", keySystem.c_str(), cleanOnDestroy);
+        CDMi_RESULT cr = CDMi_SUCCESS;
+        /* TODO: Enable with ONEM-40865
+        SafeCriticalSection systemLock(drmAppContextMutex_);
+        auto it = m_keySystemCtxs.find(keySystem);
+        if (it != m_keySystemCtxs.end()) {
+            LOGGER(LINFO_, "Key system: %s, ref count: %d, clean on destroy: %d", keySystem.c_str(), it->second->refCount, cleanOnDestroy);
+            it->second->refCount--;
+            DeinitializeSystemRefCounted(keySystem, cleanOnDestroy);
+        } else {
+            LOGGER(LERROR_, "No key system context for %s", keySystem.c_str());
+            cr = CDMi_S_FALSE;
+        } */
+        return cr;
+    }
+
     CDMi_RESULT InitializeSystemRefCounted(const std::string& keySystem) {
         CDMi_RESULT cr = CDMi_SUCCESS;
         int count = 0;
         auto it = m_keySystemCtxs.find(keySystem);
         if (it != m_keySystemCtxs.end()) {
             count = it->second->mediaKeySessionsCount;
+            //TODO: ONEM-40865 - replace above with:
+            //count = it->second->refCount;
         }
         if (count == 0) {
             Stopwatch sw;
@@ -300,9 +339,6 @@ public:
                 }
             }
             LOGGER(LINFO_, "Initialization == %d took %.03f", static_cast<int>(cr), sw.elapsed());
-
-        } else {
-            LOGGER(LINFO_, "Keysystem: %s, sessionsCount: %d\n", keySystem.c_str(),count);
         }
 
         return cr;
@@ -376,30 +412,31 @@ public:
          return DRM_SUCCESS;
     }
 
-    void DeinitializeSystemRefCounted(const std::string& keySystem) {
+    void DeinitializeSystemRefCounted(const std::string& keySystem, bool cleanOnDestroy = true) {
         auto it = m_keySystemCtxs.find(keySystem);
         ASSERT(it != m_keySystemCtxs.end());
         if (it->second->mediaKeySessionsCount == 0) {
+        //TODO: ONEM-40865 - replace above if with:
+        //if (it->second->refCount == 0) {
             Stopwatch sw;
-            CleanupStore(keySystem);
+            if (cleanOnDestroy) {
+                CleanupStore(it->second.get());
+            }
             Drm_Uninitialize(&it->second->drmAppctx);
             m_keySystemCtxs.erase(it);
             DeinitializePlatform();
-            LOGGER(LINFO_, "Deinitialization of %s keysytem took %.03f", keySystem.c_str(), sw.elapsed());
-        }
-        else {
+            LOGGER(LINFO_, "Deinitialization of %s key system took %.03f", keySystem.c_str(), sw.elapsed());
+        } else {
            if (m_persistentKeyCount > m_persistentCountThreshold) {
               m_persistentKeyCount = 0;
-              CleanupStore(keySystem);
+              CleanupStore(it->second.get());
             }
         }
     }
 
-    void CleanupStore(const std::string& keySystem) {
-        auto it = m_keySystemCtxs.find(keySystem);
-        ASSERT(it != m_keySystemCtxs.end());
-        LOGGER(LINFO_, "CleanupStore. Nontemporary sessions count: %u. Current sessions %u\n",m_persistentKeyCount, it->second->mediaKeySessionsCount);
-        DRM_RESULT dr = Drm_StoreMgmt_CleanupStore(&it->second->drmAppctx,
+    void CleanupStore(KeySystemCtx* keySystemCtx) {
+        LOGGER(LINFO_, "CleanupStore. Nontemporary sessions count: %u", m_persistentKeyCount);
+        DRM_RESULT dr = Drm_StoreMgmt_CleanupStore(&keySystemCtx->drmAppctx,
                                         DRM_STORE_CLEANUP_DELETE_REMOVAL_DATE_LICENSES,
                                         nullptr, 20, ReportProgress);
         if(DRM_FAILED(dr))
@@ -433,24 +470,30 @@ public:
         IMediaKeySession **f_ppiMediaKeySession) {
         SafeCriticalSection systemLock(drmAppContextMutex_);
 
+        //TODO: ONEM-40865 To be removed
         CDMi_RESULT cr = InitializeSystemRefCounted(keySystem);
         if (cr != CDMi_SUCCESS) {
             return cr;
         }
-       // count permanent licenses
-       if (licenseType != Temporary) m_persistentKeyCount++;
-       auto it = m_keySystemCtxs.find(keySystem);
-       ASSERT(it != m_keySystemCtxs.end());
-       CDMi::MediaKeySession* newSession= new CDMi::MediaKeySession(
-            f_pbInitData, f_cbInitData, 
-            f_pbCDMData, f_cbCDMData, 
-            m_drmOemContext, &it->second->drmAppctx,
-            keySystem
-            );
-        *f_ppiMediaKeySession = newSession;
-        it->second->mediaKeySessionsCount++;
 
-        return CDMi_SUCCESS;
+        auto it = m_keySystemCtxs.find(keySystem);
+        if (it != m_keySystemCtxs.end()) {
+            // count permanent licenses
+            if (licenseType != Temporary) m_persistentKeyCount++;
+            CDMi::MediaKeySession* newSession= new CDMi::MediaKeySession(
+                 f_pbInitData, f_cbInitData,
+                 f_pbCDMData, f_cbCDMData,
+                 m_drmOemContext, &it->second->drmAppctx,
+                 keySystem
+                 );
+             *f_ppiMediaKeySession = newSession;
+             it->second->mediaKeySessionsCount++;
+        } else {
+            LOGGER(LERROR_, "Attempt of creating session without active system %s", keySystem.c_str());
+            cr = CDMi_S_FALSE;
+        }
+
+        return cr;
     }
 
     CDMi_RESULT SetServerCertificate(
@@ -537,17 +580,14 @@ public:
 
         SafeCriticalSection lock(drmAppContextMutex_);
 
-        CDMi_RESULT cr = InitializeSystemRefCounted(DUMMY_KEYSYSTEM);
-        if (cr != CDMi_SUCCESS) {
-            return cr;
+        auto it = m_keySystemCtxs.find(DUMMY_KEYSYSTEM);
+        if (it == m_keySystemCtxs.end()) {
+            return CDMi_S_FALSE;
         }
 
         DRM_ID *ssSessionIds = nullptr;
-        auto it = m_keySystemCtxs.find(DUMMY_KEYSYSTEM);
-        ASSERT(it != m_keySystemCtxs.end());
-
-        DRM_RESULT dr;
-        dr = Drm_SecureStop_EnumerateSessions(
+        CDMi_RESULT cr = CDMi_SUCCESS;
+        DRM_RESULT dr = Drm_SecureStop_EnumerateSessions(
                 &it->second->drmAppctx,
                 m_meteringCertificateSize, //playready3MeteringCertSize,
                 m_meteringCertificate,     //playready3MeteringCert,
@@ -571,8 +611,6 @@ public:
         
         SAFE_OEM_FREE(ssSessionIds);
 
-        DeinitializeSystemRefCounted(DUMMY_KEYSYSTEM);
-
         return cr;
     }
 
@@ -587,9 +625,9 @@ public:
 
         SafeCriticalSection lock(drmAppContextMutex_);
 
-        CDMi_RESULT cr = InitializeSystemRefCounted(DUMMY_KEYSYSTEM);
-        if (cr != CDMi_SUCCESS) {
-            return cr;
+        auto it = m_keySystemCtxs.find(DUMMY_KEYSYSTEM);
+        if (it == m_keySystemCtxs.end()) {
+            return CDMi_S_FALSE;
         }
 
         // Get the secure stop challenge
@@ -599,9 +637,7 @@ public:
 
         DRM_DWORD ssChallengeSize;
         DRM_BYTE *ssChallenge;
-
-        auto it = m_keySystemCtxs.find(DUMMY_KEYSYSTEM);
-        ASSERT(it != m_keySystemCtxs.end());
+        CDMi_RESULT cr = CDMi_SUCCESS;
         DRM_RESULT dr = Drm_SecureStop_GenerateChallenge(
                 &it->second->drmAppctx,
                 &ssSessionDrmId,
@@ -621,8 +657,6 @@ public:
             rawSize = ssChallengeSize; 
         }
 
-        DeinitializeSystemRefCounted(DUMMY_KEYSYSTEM);
-
         return cr;
     }
 
@@ -637,11 +671,11 @@ public:
 
         SafeCriticalSection lock(drmAppContextMutex_);
 
-        CDMi_RESULT cr = InitializeSystemRefCounted(DUMMY_KEYSYSTEM);
-        if (cr != CDMi_SUCCESS) {
-            return cr;
+        auto it = m_keySystemCtxs.find(DUMMY_KEYSYSTEM);
+        if (it == m_keySystemCtxs.end()) {
+            return CDMi_S_FALSE;
         }
-
+        CDMi_RESULT cr = CDMi_SUCCESS;
         if (sessionIDLength == 0) {
             LOGGER(LERROR_, "Error: empty session id");
             cr = CDMi_S_FALSE;
@@ -659,8 +693,6 @@ public:
             DRM_CHAR *pCustomData = NULL;
             
             DRM_RESULT dr;
-            auto it = m_keySystemCtxs.find(DUMMY_KEYSYSTEM);
-            ASSERT(it != m_keySystemCtxs.end());
             dr = Drm_SecureStop_ProcessResponse(
                 &it->second->drmAppctx,
                 &sessionDrmId,
@@ -688,8 +720,6 @@ public:
             SAFE_OEM_FREE(pCustomData);
         }
 
-        DeinitializeSystemRefCounted(DUMMY_KEYSYSTEM);
-
         return cr;
     }
 
