From 99a65992e6313a4e66c0ce0d22f7916d86b66a10 Mon Sep 17 00:00:00 2001
From: Adam Stolcenburg <astolcenburg.contractor@libertyglobal.com>
Date: Fri, 22 Oct 2021 10:15:54 +0200
Subject: [PATCH] ONEM-22976 Link life cycles of system initialization with key
 sessions

Initialize DRM platform in the context of PlayReady::CreateMediaKeySession()
and deinitialize in the context of PlayReady::DestroyMediaKeySession().

Return error if it is not possible to create a key session
inside the PlayReady::CreateMediaKeySession() function.

If not already initialized, then initialize DRM platform, to
handle PlayReady::GetSecureStopIds(), PlayReady::GetSecureStop() and
PlayReady::CommitSecureStop() functions.
---
 MediaSystem.cpp | 83 ++++++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 76 insertions(+), 7 deletions(-)

diff --git a/MediaSystem.cpp b/MediaSystem.cpp
index 59add66..916466d 100644
--- a/MediaSystem.cpp
+++ b/MediaSystem.cpp
@@ -32,6 +32,8 @@
 //TODO: mirgrate this to Core
 #include <openssl/sha.h>
 
+#include <time.h>
+
 using namespace WPEFramework;
 
 using SafeCriticalSection = Core::SafeSyncType<WPEFramework::Core::CriticalSection>;
@@ -45,6 +47,25 @@ Core::CriticalSection drmAppContextMutex_;
 // via the getLdlSessionLimit() API.
 const uint32_t NONCE_STORE_SIZE = 100;
 
+namespace {
+
+class Stopwatch {
+    struct timespec _begin = {0, 0};
+
+  public:
+    Stopwatch() {
+      clock_gettime(CLOCK_MONOTONIC, &_begin);
+    }
+
+    double elapsed() {
+      struct timespec end = {0, 0};
+      clock_gettime(CLOCK_MONOTONIC, &end);
+      return (end.tv_sec - _begin.tv_sec) + (end.tv_nsec - _begin.tv_nsec) * 1e-9;
+    }
+};
+
+}
+
 // Creates a new DRM_WCHAR[] on the heap from the provided string.
 // Note: Caller takes ownership of returned heap memory.
 static DRM_WCHAR* createDrmWchar(std::string const& s) {
@@ -131,6 +152,7 @@ public:
         , m_storeLocation()
         , m_meteringCertificate(nullptr)
         , m_meteringCertificateSize(0)
+        , m_mediaKeySessionsCount(0)
     {
         NxClient_JoinSettings joinSettings;
         NxClient_AllocSettings nxAllocSettings;
@@ -213,11 +235,25 @@ public:
                 ::memcpy(m_meteringCertificate, dataBuffer.Buffer(), dataBuffer.Size());
             }
         }
+    }
 
-        InitializeSystem();      
+    CDMi_RESULT InitializeSystemRefCounted(){
+        CDMi_RESULT cr = CDMi_SUCCESS;
+
+        if (m_mediaKeySessionsCount++ == 0) {
+            Stopwatch sw;
+            cr = InitializeSystem();
+            LOGGER(LINFO_, "InitializeSystem() == %d took %.03f", static_cast<int>(cr), sw.elapsed());
+            if (cr != CDMi_SUCCESS) {
+                --m_mediaKeySessionsCount;
+            }
+        }
+
+        return cr;
     }
 
-    void InitializeSystem(){
+    CDMi_RESULT InitializeSystem(){
+        CDMi_RESULT cr = CDMi_S_FALSE;
         LOGGER(LINFO_, "Initialize PlayReady System, Build: %s", __TIMESTAMP__ );
 
         if(m_poAppContext.get()){
@@ -261,17 +297,26 @@ public:
         m_drmOemContext = m_oemSettings.f_pOEMContext;
         ChkMem(m_drmOemContext);
 
-        CreateSystemExt();
+        cr = CreateSystemExt();
     ErrorExit:
         if (DRM_FAILED(dr))
         {
             LOGGER(LERROR_, "Playready System Initialize failed (error: 0x%08X)", static_cast<unsigned int>(dr));
         }
+
+        return cr;
     }
 
     void Deinitialize(const WPEFramework::PluginHost::IShell * shell)
     {
-        DeinitializeSystem();
+    }
+
+    void DeinitializeSystemRefCounted() {
+        if (--m_mediaKeySessionsCount == 0) {
+            Stopwatch sw;
+            DeinitializeSystem();
+            LOGGER(LINFO_, "DeinitializeSystem() took %.03f", sw.elapsed());
+        }
     }
 
     void DeinitializeSystem() { 
@@ -305,6 +350,12 @@ public:
         const uint8_t *f_pbInitData, uint32_t f_cbInitData, 
         const uint8_t *f_pbCDMData, uint32_t f_cbCDMData, 
         IMediaKeySession **f_ppiMediaKeySession) {
+        SafeCriticalSection systemLock(drmAppContextMutex_);
+
+        CDMi_RESULT cr = InitializeSystemRefCounted();
+        if (cr != CDMi_SUCCESS) {
+            return cr;
+        }
 
         // ToDo: This needs to be solved a bit nicer... 
         // Since the OCDM server is not aware of the location of the store but exposes a "delete store" API,
@@ -342,6 +393,8 @@ public:
         delete f_piMediaKeySession;
         f_piMediaKeySession= nullptr;
 
+        DeinitializeSystemRefCounted();
+
         return CDMi_SUCCESS;
     }
 
@@ -401,7 +454,10 @@ public:
     {
         SafeCriticalSection lock(drmAppContextMutex_);
 
-        CDMi_RESULT cr = CDMi_SUCCESS;
+        CDMi_RESULT cr = InitializeSystemRefCounted();
+        if (cr != CDMi_SUCCESS) {
+            return cr;
+        }
 
         DRM_ID *ssSessionIds = nullptr;
 
@@ -430,6 +486,8 @@ public:
         
         SAFE_OEM_FREE(ssSessionIds);
 
+        DeinitializeSystemRefCounted();
+
         return cr;
     }
 
@@ -441,7 +499,10 @@ public:
     {
         SafeCriticalSection lock(drmAppContextMutex_);
 
-        CDMi_RESULT cr = CDMi_SUCCESS;
+        CDMi_RESULT cr = InitializeSystemRefCounted();
+        if (cr != CDMi_SUCCESS) {
+            return cr;
+        }
 
         // Get the secure stop challenge
         DRM_ID ssSessionDrmId;
@@ -470,6 +531,8 @@ public:
             rawSize = ssChallengeSize; 
         }
 
+        DeinitializeSystemRefCounted();
+
         return cr;
     }
 
@@ -481,7 +544,10 @@ public:
     {
         SafeCriticalSection lock(drmAppContextMutex_);
 
-        CDMi_RESULT cr = CDMi_SUCCESS;
+        CDMi_RESULT cr = InitializeSystemRefCounted();
+        if (cr != CDMi_SUCCESS) {
+            return cr;
+        }
 
         if (sessionIDLength == 0) {
             LOGGER(LERROR_, "Error: empty session id");
@@ -527,6 +593,8 @@ public:
             SAFE_OEM_FREE(pCustomData);
         }
 
+        DeinitializeSystemRefCounted();
+
         return cr;
     }
 
@@ -915,6 +983,7 @@ private:
 
     DRM_BYTE* m_meteringCertificate;
     uint32_t m_meteringCertificateSize;
+    int32_t m_mediaKeySessionsCount;
 };
 
 static SystemFactoryType<PlayReady> g_instance({"video/x-h264", "audio/mpeg"});
-- 
2.7.4

