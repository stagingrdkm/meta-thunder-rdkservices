OMWAPPI-914 Pass subsample information to cdm

This patch changes Decrypt method to non deprecated version, which allows
to pass subsample information. In case subsample count is zero, cdm
return error, so fake, fully encrypted subsample is sent.

diff --git a/MediaSession.cpp b/MediaSession.cpp
index f05ddce..5973f3f 100644
--- a/MediaSession.cpp
+++ b/MediaSession.cpp
@@ -436,20 +436,25 @@ CDMi_RESULT MediaKeySession::Init(
 }
 
 CDMi_RESULT MediaKeySession::Decrypt(
-    const uint8_t *f_pbSessionKey,
-    uint32_t f_cbSessionKey,
-    const EncryptionScheme encryptionScheme,
-    const EncryptionPattern& pattern,
-    const uint8_t *f_pbIV,
-    uint32_t f_cbIV,
-    uint8_t *f_pbData,
-    uint32_t f_cbData,
-    uint32_t *f_pcbOpaqueClearContent,
-    uint8_t **f_ppbOpaqueClearContent,
-    const uint8_t keyIdLength,
-    const uint8_t* keyId,
-    bool /* initWithLast15 */)
-{
+        uint8_t* inData,
+        const uint32_t inDataLength,
+        uint8_t** outData,
+        uint32_t* outDataLength,
+        const SampleInfo* sampleInfo,
+        const IStreamProperties* properties) {
+  const uint8_t *f_pbSessionKey = sampleInfo->keyId;
+  uint32_t f_cbSessionKey = sampleInfo->keyIdLength;
+  const EncryptionScheme encryptionScheme = sampleInfo->scheme;
+  const EncryptionPattern& pattern = sampleInfo->pattern;
+  const uint8_t *f_pbIV = sampleInfo->iv;
+  uint32_t f_cbIV = sampleInfo->ivLength;
+  uint8_t *f_pbData = inData;
+  uint32_t f_cbData = inDataLength;
+  uint32_t *f_pcbOpaqueClearContent = outDataLength;
+  uint8_t **f_ppbOpaqueClearContent = outData;
+  const uint8_t keyIdLength = sampleInfo->keyIdLength;
+  const uint8_t* keyId = sampleInfo->keyId;
+  //bool initWithLast15 = properties->InitLength();
 
   static NEXUS_HeapHandle secureHeap = NEXUS_Heap_Lookup(NEXUS_HeapLookupType_eCompressedRegion);
 
@@ -523,14 +528,26 @@ CDMi_RESULT MediaKeySession::Decrypt(
     // FIXME: We just check the first key? How do we know that's the Widevine key and not, say, a PlayReady one?
     if (widevine::Cdm::kUsable == it->second) {
 #if defined (USE_CENC16)
-      widevine::Cdm::Subsample subsample;
-      subsample.protected_bytes = f_cbData;
+      std::vector<widevine::Cdm::Subsample> subsamples;
+      if (sampleInfo->subSampleCount > 0) {
+        for (int i = 0; i < sampleInfo->subSampleCount; i++) {
+          widevine::Cdm::Subsample subsample;
+          subsample.protected_bytes = sampleInfo->subSample[i].encrypted_bytes;
+          subsample.clear_bytes = sampleInfo->subSample[i].clear_bytes;
+          subsamples.push_back(subsample);
+        }
+      } else {
+        widevine::Cdm::Subsample subsample;
+        subsample.protected_bytes = f_cbData;
+        subsample.clear_bytes = 0;
+        subsamples.push_back(subsample);
+      }
 
       widevine::Cdm::Sample sample;
       sample.input.data = reinterpret_cast<uint8_t*>(m_pNexusMemory);
       sample.input.data_length = f_cbData;
-      sample.input.subsamples = &subsample;
-      sample.input.subsamples_length = 1;
+      sample.input.subsamples = subsamples.data();
+      sample.input.subsamples_length = subsamples.size();
       sample.input.iv = m_IV;
       sample.input.iv_length = sizeof(m_IV);
 
diff --git a/MediaSession.h b/MediaSession.h
index 3d5ee96..c4d878c 100644
--- a/MediaSession.h
+++ b/MediaSession.h
@@ -103,19 +103,12 @@ public:
         uint32_t f_cbCDMData);
 
     virtual CDMi_RESULT Decrypt(
-        const uint8_t *f_pbSessionKey,
-        uint32_t f_cbSessionKey,
-        const EncryptionScheme encryptionScheme,
-        const EncryptionPattern& pattern,
-        const uint8_t *f_pbIV,
-        uint32_t f_cbIV,
-        uint8_t *f_pbData,
-        uint32_t f_cbData,
-        uint32_t *f_pcbOpaqueClearContent,
-        uint8_t **f_ppbOpaqueClearContent,
-        const uint8_t keyIdLength,
-        const uint8_t* keyId,
-        bool initWithLast15);
+        uint8_t* inData,
+        const uint32_t inDataLength,
+        uint8_t** outData,
+        uint32_t* outDataLength,
+        const SampleInfo* sampleInfo,
+        const IStreamProperties* properties);
 
     virtual CDMi_RESULT ReleaseClearContent(
         const uint8_t *f_pbSessionKey,
